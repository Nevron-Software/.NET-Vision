<%@ Control Language="vb" Inherits="Nevron.Examples.Diagram.Webform.NDynamicImageMapUC" CodeFile="NDynamicImageMapUC.ascx.vb" %>
<%@ Register TagPrefix="ncwd" Namespace="Nevron.Diagram.WebForm" Assembly="Nevron.Diagram.WebForm" %>

<!-- Example layout BEGIN -->
<table id="exampleRootTable" style="width: 721px; vertical-align: top;" summary="Example layout table">
<tr>
	<td id="exampleImageCell" class="ImageCell" style="width: 442px; vertical-align: top;">
		<!-- Diagram control placeholder BEGIN -->
		<ncwd:NDrawingView id="NDrawingView1" runat="server" Width="416px" Height="336px" AjaxEnabled="True" AsyncAutoRefreshEnabled="True" AsyncRefreshInterval="1000" AsyncCallbackTimeout="10000" AsyncRequestWaitCursorEnabled="False" AsyncRefreshEnabled="True" OnQueryAjaxTools="NDrawingView1_QueryAjaxTools" OnAsyncMouseOut="NDrawingView1_AsyncMouseOut" OnAsyncMouseOver="NDrawingView1_AsyncMouseOver" OnAsyncRefresh="NDrawingView1_AsyncRefresh">
		</ncwd:NDrawingView>
		<!-- Diagram control placeholder END -->
	</td>
	<td id="exampleVDelimiterCell" class="DelimiterCell" rowspan="2">&nbsp;</td>
	<td id="exampleConfigurationCell" class="ControlsPanel" rowspan="2" style="width: 266px;">
		<!-- Configuration controls panel placeholder BEGIN -->
		<label for="mouseOverCheckbox"><input id="mouseOverCheckbox" name="mouseOverCheckbox" type="checkbox" onclick="UpdateState();" value="on" /> Enable over event processing</label><br />
		<label for="mouseOutCheckbox"><input id="mouseOutCheckbox" name="mouseOutCheckbox" type="checkbox" onclick="UpdateState();" /> Enable out event processing</label>
		<br />&nbsp;<br />
		<label for="autoRefreshCheckbox"><input id="autoRefreshCheckbox" name="autoRefreshCheckbox" type="checkbox" onclick="UpdateState();" /> Enable auto-refresh</label><br />
		&nbsp;<select id="autoRefreshIntervalCombo" name="autoRefreshIntervalCombo" onchange="UpdateState();">
			<option value="1">1 ms</option>
			<option value="10">10 ms</option>
			<option value="20">20 ms</option>
			<option value="50">50 ms</option>
			<option value="100">100 ms</option>
			<option value="200">200 ms</option>
			<option value="500">500 ms</option>
			<option value="1000">1 s</option>
			<option value="2000">2 s</option>
			<option value="5000">5 s</option>
		</select> refresh interval<p />
		<select multiple="multiple" id="infoList" style="width: 230px; height: 300px;"></select><br />&nbsp;<br />&nbsp;<br />
		<!-- Configuration controls panel placeholder END -->
	</td>
</tr>
<tr>
	<td id="exampleDescriptionCell" class="Description">
		<!-- Description box placeholder BEGIN -->
		This example demonstrates the application of the dynamic image map, automatically generated
		and updated at client side on every asyncronous callback.
		<br />&nbsp;<br />
		The dynamic image map allows for processing of the mouse over and mouse out events
		for the separate elements of the diagram.
		<br />&nbsp;<br />
		The hover effect is achieved by delegating the mouse over and out events to the server.
		The event log listbox is updated by intercepting the mouse over and out events
		on the client side.
		<br />
		<!-- Description box placeholder END -->
	</td>
</tr>
</table>
<!-- Example layout END -->

<!-- Custom JavaScript placeholder BEGIN -->
<script type="text/javascript" language="javascript">
<!--
	function Refresh()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');
		
		cs.Refresh();
	}
	
	function ReadState()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		var mouseOverCheckbox = document.getElementById("mouseOverCheckbox");
		var mouseOutCheckbox = document.getElementById("mouseOutCheckbox");
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		var autoRefreshIntervalCombo = document.getElementById("autoRefreshIntervalCombo");
		
		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');
		
		mouseOverCheckbox.checked = cs.controller.GetToolById(NMouseOverCallbackTool.GetClassName()).GetEnabled();
		mouseOutCheckbox.checked = cs.controller.GetToolById(NMouseOutCallbackTool.GetClassName()).GetEnabled();

		autoRefreshCheckbox.checked = cs.GetAutoRefreshEnabled();
		autoRefreshIntervalCombo.value = cs.GetAutoRefreshInterval();
	}

	function UpdateState()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		var mouseOverCheckbox = document.getElementById("mouseOverCheckbox");
		var mouseOutCheckbox = document.getElementById("mouseOutCheckbox");
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		var autoRefreshIntervalCombo = document.getElementById("autoRefreshIntervalCombo");
		
		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');
		var prevAutoRefreshState = cs.GetAutoRefreshEnabled();
		
		cs.controller.EnableTool(NMouseOverCallbackTool.GetClassName(), mouseOverCheckbox.checked);
		cs.controller.EnableTool(NMouseOutCallbackTool.GetClassName(), mouseOutCheckbox.checked);

		cs.SetAutoRefreshEnabled(autoRefreshCheckbox.checked);
		cs.SetAutoRefreshInterval(parseInt(autoRefreshIntervalCombo.options[autoRefreshIntervalCombo.selectedIndex].value));

		if(autoRefreshCheckbox.checked && prevAutoRefreshState == false)
			cs.Refresh();
	}
	
	function MouseMapOver(self, eventData)
	{
		var infoList = document.getElementById("infoList");
		var text = "Entered: " + eventData.imageMapObjectItem.userData;
		var option = document.createElement("option");
		
		option.appendChild(document.createTextNode(text));
		infoList.appendChild(option);
	}
	
	function MouseMapOut(self, eventData)
	{
		var infoList = document.getElementById("infoList");
		var text = "Left: " + eventData.imageMapObjectItem.userData;
		var option = document.createElement("option");
		
		option.appendChild(document.createTextNode(text));
		infoList.appendChild(option);
	}
	
	ReadState();
	NEventSinkService.MouseMapOver.Subscribe(null, MouseMapOver);
	NEventSinkService.MouseMapOut.Subscribe(null, MouseMapOut);
//-->
</script>
<!-- Custom JavaScript placeholder END -->

