<%@ Control Language="vb" Inherits="Nevron.Examples.Diagram.Webform.NGameOfLifeUC" CodeFile="NGameOfLifeUC.ascx.vb" %>
<%@ Register TagPrefix="ncwd" Namespace="Nevron.Diagram.WebForm" Assembly="Nevron.Diagram.WebForm" %>

<!-- Example layout BEGIN -->
<table id="exampleRootTable" style="width: 755px; vertical-align: top;" summary="Example layout table">
<tr>
	<td id="exampleImageCell" class="ImageCell" style="width: 442px; vertical-align: top;">
		<!-- Diagram control placeholder BEGIN -->
		<ncwd:NDrawingView id="NDrawingView1" runat="server" Width="416px" Height="336px" AjaxEnabled="True" AsyncAutoRefreshEnabled="True" AsyncCallbackTimeout="10000" AsyncRefreshInterval="1000" AsyncRequestWaitCursorEnabled="False" AsyncRefreshEnabled="True" OnQueryAjaxTools="NDrawingView1_QueryAjaxTools">
		</ncwd:NDrawingView>
		<!-- Diagram control placeholder END -->
	</td>
	<td id="exampleVDelimiterCell" class="DelimiterCell" rowspan="2">&nbsp;</td>
	<td id="exampleConfigurationCell" class="ControlsPanel" rowspan="2" style="width: 300px; font-size: 8pt;">
		<!-- Configuration controls panel placeholder BEGIN -->
		<label for="mouseClickCheckbox"><input id="mouseClickCheckbox" name="mouseClickCheckbox" type="checkbox" onclick="UpdateState();" value="on" /> Enable click (toggle a cell)</label><br />
		<label for="mouseDoubleClickCheckbox"><input id="mouseDoubleClickCheckbox" name="mouseDoubleClickCheckbox" type="checkbox" onclick="UpdateState();" /> Enable double click (clear the board)</label><br />
		<label for="mouseMoveCheckbox"><input id="mouseMoveCheckbox" name="mouseMoveCheckbox" type="checkbox" onclick="UpdateState();" /> Enable mouse move (hover effect)</label><br />
		<label for="mouseDownCheckbox"><input id="mouseDownCheckbox" name="mouseDownCheckbox" type="checkbox" onclick="UpdateState();" /> Enable mouse down (pin cell - will not change)</label><br />
		<label for="mouseUpCheckbox"><input id="mouseUpCheckbox" name="mouseUpCheckbox" type="checkbox" onclick="UpdateState();" /> Enable mouse up (remove pin from cell)</label><p />
		
		<label for="autoRefreshCheckbox"><input id="autoRefreshCheckbox" name="autoRefreshCheckbox" type="checkbox" onclick="UpdateState();" /> Enable auto-refresh</label><br />
		&nbsp;<select id="autoRefreshIntervalCombo" name="autoRefreshIntervalCombo" onchange="UpdateState();">
			<option value="1">1 ms</option>
			<option value="10">10 ms</option>
			<option value="20">20 ms</option>
			<option value="50">50 ms</option>
			<option value="100">100 ms</option>
			<option value="200">200 ms</option>
			<option value="500">500 ms</option>
			<option value="1000">1 s</option>
			<option value="2000">2 s</option>
			<option value="5000">5 s</option>
		</select> refresh interval<p />
		
		&nbsp;<input id="refreshButton" onclick="Refresh();" type="button" value="Refresh" /><p />
		&nbsp;<span id="infoSpan"></span>
		<!-- Configuration controls panel placeholder END -->
	</td>
</tr>
<tr>
	<td id="exampleDescriptionCell" class="Description">
		<!-- Description box placeholder BEGIN -->
		The Game of Life is a cellular automaton, invented by John Conway. The ground rules are:
		an empty cell gets filled when it has exactly 3 filled neighbours (by side or by corner),
		a filled cell stays intact when it has 2 or 3 filled neighbours and in all other cases a cell
		either stays empty or becomes empty. All birth (fill) and death (make empty) 
		operations are performed for the complete board turn by turn.
		<br />&nbsp;<br />
		<a target="about:_blank" href="http://www.google.co.uk/search?hl=en&q=Game+of+Life">What Google says about Game of Life</a>.
		<!-- Description box placeholder END -->
	</td>
</tr>
</table>
<!-- Example layout END -->

<!-- Custom JavaScript placeholder BEGIN -->
<script type="text/javascript" language="javascript">
<!--
	function Refresh()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');
		
		cs.Refresh();
	}
	
	function ReadState()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		var mouseClickCheckbox = document.getElementById("mouseClickCheckbox");
		var mouseDoubleClickCheckbox = document.getElementById("mouseDoubleClickCheckbox");
		var mouseMoveCheckbox = document.getElementById("mouseMoveCheckbox");
		var mouseDownCheckbox = document.getElementById("mouseDownCheckbox");
		var mouseUpCheckbox = document.getElementById("mouseUpCheckbox");
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		var autoRefreshIntervalCombo = document.getElementById("autoRefreshIntervalCombo");
		
		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');
		
		mouseClickCheckbox.checked = cs.controller.GetToolById(NMouseClickCallbackTool.GetClassName()).GetEnabled();
		mouseDoubleClickCheckbox.checked = cs.controller.GetToolById(NMouseDoubleClickCallbackTool.GetClassName()).GetEnabled();
		mouseMoveCheckbox.checked = cs.controller.GetToolById(NMouseMoveCallbackTool.GetClassName()).GetEnabled();
		mouseDownCheckbox.checked = cs.controller.GetToolById(NMouseDownCallbackTool.GetClassName()).GetEnabled();
		mouseUpCheckbox.checked = cs.controller.GetToolById(NMouseUpCallbackTool.GetClassName()).GetEnabled();

		autoRefreshCheckbox.checked = cs.GetAutoRefreshEnabled();
		autoRefreshIntervalCombo.value = cs.GetAutoRefreshInterval();
	}

	function UpdateState()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		var mouseClickCheckbox = document.getElementById("mouseClickCheckbox");
		var mouseDoubleClickCheckbox = document.getElementById("mouseDoubleClickCheckbox");
		var mouseMoveCheckbox = document.getElementById("mouseMoveCheckbox");
		var mouseDownCheckbox = document.getElementById("mouseDownCheckbox");
		var mouseUpCheckbox = document.getElementById("mouseUpCheckbox");
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		var autoRefreshIntervalCombo = document.getElementById("autoRefreshIntervalCombo");

		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');
		var prevAutoRefreshState = cs.GetAutoRefreshEnabled();
		
		cs.controller.EnableTool(NMouseClickCallbackTool.GetClassName(), mouseClickCheckbox.checked);
		cs.controller.EnableTool(NMouseDoubleClickCallbackTool.GetClassName(), mouseDoubleClickCheckbox.checked);
		cs.controller.EnableTool(NMouseMoveCallbackTool.GetClassName(), mouseMoveCheckbox.checked);
		cs.controller.EnableTool(NMouseDownCallbackTool.GetClassName(), mouseDownCheckbox.checked);
		cs.controller.EnableTool(NMouseUpCallbackTool.GetClassName(), mouseUpCheckbox.checked);

		cs.SetAutoRefreshEnabled(autoRefreshCheckbox.checked);
		cs.SetAutoRefreshInterval(parseInt(autoRefreshIntervalCombo.options[autoRefreshIntervalCombo.selectedIndex].value));

		if(autoRefreshCheckbox.checked && prevAutoRefreshState == false)
			cs.Refresh();
	}
	
	function CallbackSucceeded(self, result, context)
	{
		var infoSpan = document.getElementById("infoSpan");
				
		var t = context.callbackService.GetAvgCallbackTime();
		if(t == 0)
			return;
		infoSpan.innerHTML = "<i>Average response time: " + Math.round(t) + " ms</i>";
	}
	
	ReadState();
	NEventSinkService.AsyncCallbackSucceeded.Subscribe(null, CallbackSucceeded);
//-->
</script>
<!-- Custom JavaScript placeholder END -->
