<%@ Control Language="c#" Inherits="Nevron.Examples.Diagram.Webform.NBalloonTreeLayoutUC"
    CodeFile="NBalloonTreeLayoutUC.ascx.cs" %>
<%@ Register TagPrefix="ncwd" Namespace="Nevron.Diagram.WebForm" Assembly="Nevron.Diagram.WebForm" %>

<!-- Example layout BEGIN -->
<table id="exampleRootTable" style="width:704px; vertical-align: top;" summary="Example layout table">
    <tr>
        <td id="exampleImageCell" class="ImageCell" style="width: 442px; vertical-align: top;">
            <!-- Diagram control placeholder BEGIN -->
		    <ncwd:NDrawingView id="NDrawingView1" runat="server" Width="416px" Height="336px"
		        AjaxEnabled="True" OnAsyncCustomCommand="NDrawingView1_AsyncCustomCommand"
		        OnAsyncQueryCommandResult="NDrawingView1_AsyncQueryCommandResult" />
            <!-- Diagram control placeholder END -->
        </td>
        <td id="exampleVDelimiterCell" class="DelimiterCell" rowspan="2"></td>
        <td id="exampleConfigurationCell" class="ControlsPanel" rowspan="2" style="width: 249px;">
            <!-- Configuration controls panel placeholder BEGIN -->
                <table id="properties">
                    <tr>
                        <td style="padding:3px">Start Angle</td>
                        <td style="padding:3px"><input type="text" id="StartAngle" value="0" maxlength="3" style="width:56px" onchange="ValidateTextBox(this, 'int', 0, 0, 360)" /></td>
                    </tr>
                    <tr>
                        <td style="padding:3px">Root Wedge</td>
                        <td style="padding:3px"><input type="text" id="RootWedge" value="360" maxlength="3" style="width:56px" onchange="ValidateTextBox(this, 'int', 360, 0, 360)" /></td>
                    </tr>
                    <tr>
                        <td style="padding:3px">Children Wedge</td>
                        <td style="padding:3px"><input type="text" id="ChildrenWedge" value="360" maxlength="3" style="width:56px" onchange="ValidateTextBox(this, 'int', 360, 0, 360)" /></td>
                    </tr>
                    <tr>
                        <td style="padding:3px">Parent-Child Spacing</td>
                        <td style="padding:3px"><input type="text" id="ParentChildSpacing" value="75" maxlength="4" style="width:56px" onchange="ValidateTextBox(this, 'int', 75, 10, 1000)" /></td>
                    </tr>
                </table>
                <hr class="WhiteHr" />
                <p>
                    <input type="button" id="layout" value="Layout" style="width:218px" onclick="InvokeCustomCommand()" />
                </p>          
            <!-- Configuration controls panel placeholder END -->
        </td>
    </tr>
    <tr>
        <td id="exampleDescriptionCell" class="Description">
            <!-- Description box placeholder BEGIN -->
	        <p>
                The baloon tree layout tries to compact the drawing area of the tree 
                by placing the vertices in balloons around the tree root.
                It produces straight line tree drawings. 
            </p>
            <p>        
                Following is a brief description of its properties:
		        <ul>
			        <li>
			            <b>ParentChildSpacing</b> - the preferred spacing between a parent and a child
			            vertex in the layout direction. The real spacing may be different for some nodes,
			            because the layout does not allow overlappings.
			        </li>
			        <li>
			            <b>VertexSpacing</b> - the minimal spacing between 2 nodes in the layout.
			            If set to 0, the nodes will touch each other.
			        </li>
			        <li>
			            <b>ChildWedge</b> - the sector angle (measured in degrees) for the children
			            of each vertex.
			        </li>
			        <li>
			            <b>RootWedge</b> - the sector angle (measured in degrees) for the children
			            of the root vertex.
			        </li>
			        <li>
			            <b>StartAngle</b> - the start angle for the children of the root vertex, measured in
			            degrees anticlockwise from the x-axis.
			        </li>
		        </ul>
	        </p>
            <!-- Description box placeholder END -->
        </td>
    </tr>
</table>
<!-- Example layout END -->

<!-- Custom JavaScript placeholder START -->
<script type="text/javascript" language="javascript">
<!--
	//  sends a custom command to the server using async callback
	function InvokeCustomCommand()
	{
		if(typeof(NDiagramCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the diagram control must be used, e.g. "ctl04_NDrawingView1"
		//	rather than just "NDrawingView1". The "ctl05" is the id generated by the ASP.NET framework 
		//	for the user control hosting the diagram control.
		var cs = NDiagramCallbackService.GetCallbackService('ctl04_NDrawingView1');		
		cs.InvokeCustomCommand("LayoutButton_Clicked", GetProperties());
	}
//-->
</script>
<!-- Custom JavaScript placeholder END -->