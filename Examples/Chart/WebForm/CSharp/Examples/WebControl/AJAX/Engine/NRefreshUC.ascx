<%@ Control Language="c#" Inherits="Nevron.Examples.Chart.WebForm.NRefreshUC" CodeFile="NRefreshUC.ascx.cs" %>
<%@ Register TagPrefix="ncwc" Namespace="Nevron.Chart.WebForm" Assembly="Nevron.Chart.WebForm" %>

<!-- Example layout BEGIN -->
<table id="exampleRootTable" style="width: 682px; vertical-align: top;" summary="Example layout table">
<tr>
	<td id="exampleImageCell" class="ImageCell" style="width: 420px; vertical-align: top;">
		<!-- Chart control placeholder BEGIN -->
		<ncwc:NChartControl id="nChartControl1" runat="server" Width="420px" Height="320px" AjaxEnabled="True" AsyncAutoRefreshEnabled="True" AsyncClickEventEnabled="False" AsyncRefreshInterval="1000" AsyncCallbackTimeout="10000" OnAsyncRefresh="nChartControl1_AsyncRefresh" AsyncRefreshEnabled="True" AjaxImageMapMode="Never">
		</ncwc:NChartControl>
        <!-- Chart control placeholder END -->
	</td>
	<td id="exampleVDelimiterCell" class="DelimiterCell" rowspan="2">&nbsp;</td>
	<td id="exampleConfigurationCell" class="ControlsPanel" rowspan="2" style="width: 325px;">
		<!-- Configuration controls panel placeholder BEGIN -->
			<label for="refreshCheckbox"><input id="refreshCheckbox" type="checkbox" checked="true" onclick="UpdateState();" /> Enable forced refresh</label><br />
			&nbsp;<input id="refreshButton" type="button" value="Refresh" onclick="Refresh();" /><p />
			<label for="autoRefreshCheckbox"><input id="autoRefreshCheckbox" type="checkbox" checked="true" onclick="UpdateState();" /> Enable auto-refresh</label><br />
			&nbsp;<select id="autoRefreshIntervalCombo" onchange="UpdateState();">
				<option value="1">1 ms</option>
				<option value="10">10 ms</option>
				<option value="20">20 ms</option>
				<option value="50">50 ms</option>
				<option value="100">100 ms</option>
				<option value="200">200 ms</option>
				<option value="500">500 ms</option>
				<option value="1000">1 s</option>
				<option value="2000">2 s</option>
				<option value="5000">5 s</option>
			</select><p />
			<label for="waitCursorCheckbox"><input id="waitCursorCheckbox" type="checkbox" onclick="UpdateState();" checked="CHECKED" /> Enable wait cursor</label><br />
			<hr class="WhiteHr" />
			&nbsp;<span id="infoSpan"></span>
        <!-- Configuration controls panel placeholder END -->
	</td>
</tr>
<tr>
	<td id="exampleDescriptionCell" style="width: 420px;" class="Description">
		<!-- Description box placeholder BEGIN -->
		This example demonstrates the refresh and auto-refresh AJAX capabilities of Nevron .NET
		controls.
		<br />&nbsp;<br />
		The high response time is a result of the large view state, generated by the web form,
		as well as by the time the server needs to recreate the web form on each callback request.
		When Microsoft AJAX callbacks are used, the complete view state of the web form is always
		sent to the server.
		<br />&nbsp;<br />
		Nevron offers as an alternative the optimized AJAX Nevron Instant Callback technology,
		which is demonstrated in the
		<b>Client Side Event Queueing</b>, 
		<b>Instant Auto-Refresh</b> and 
		<b>Instant Mouse Events</b>
		examples.
		<br />
		<!-- Description box placeholder END -->
	</td>
</tr>
</table>
<!-- Example layout END -->

<!-- Custom JavaScript placeholder BEGIN -->
<script type="text/javascript" language="javascript">
<!--
	function Refresh()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		cs.Refresh();
	}
	
	function ReadState()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
		
		var refreshCheckbox = document.getElementById("refreshCheckbox");
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		var waitCursorCheckbox = document.getElementById("waitCursorCheckbox");
		var autoRefreshIntervalCombo = document.getElementById("autoRefreshIntervalCombo");
		
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		refreshCheckbox.checked = cs.GetRefreshEnabled();
		autoRefreshCheckbox.checked = cs.GetAutoRefreshEnabled();
		waitCursorCheckbox.checked = cs.GetWaitCursorEnabled();
		autoRefreshIntervalCombo.value = cs.GetAutoRefreshInterval();
	}

	function UpdateState()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		var refreshCheckbox = document.getElementById("refreshCheckbox");
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		var waitCursorCheckbox = document.getElementById("waitCursorCheckbox");
		var autoRefreshIntervalCombo = document.getElementById("autoRefreshIntervalCombo");
		
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		var prevAutoRefreshState = cs.GetAutoRefreshEnabled();
		
		cs.SetRefreshEnabled(refreshCheckbox.checked);
		cs.SetAutoRefreshEnabled(autoRefreshCheckbox.checked);
		cs.SetWaitCursorEnabled(waitCursorCheckbox.checked);
		cs.SetAutoRefreshInterval(parseInt(autoRefreshIntervalCombo.options[autoRefreshIntervalCombo.selectedIndex].value));
		
		if(autoRefreshCheckbox.checked && prevAutoRefreshState == false)
		{
			var prevRefreshState = cs.GetRefreshEnabled();
			cs.SetRefreshEnabled(true);
			cs.Refresh();
			cs.SetRefreshEnabled(prevRefreshState);
		}
	}
	
	function CallbackSucceeded(self, result, context)
	{
		var infoSpan = document.getElementById("infoSpan");
				
		var t = context.callbackService.GetAvgCallbackTime();
		if(t == 0)
			return;
		infoSpan.innerHTML = "<i>Average response time: " + Math.round(t) + " ms</i>";
	}
	
	ReadState();
	NEventSinkService.AsyncCallbackSucceeded.Subscribe(null, CallbackSucceeded);
//-->
</script>
<!-- Custom JavaScript placeholder END -->
