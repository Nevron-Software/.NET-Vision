<%@ Control Language="c#" Inherits="Nevron.Examples.Chart.WebForm.NCustomCommandsUC" CodeFile="NCustomCommandsUC.ascx.cs" %>
<%@ Register TagPrefix="ncwc" Namespace="Nevron.Chart.WebForm" Assembly="Nevron.Chart.WebForm" %>

<!-- Example layout BEGIN -->
<table id="exampleRootTable" style="width: 729px; vertical-align: top;" summary="Example layout table">
<tr>
	<td id="exampleImageCell" class="ImageCell" style="width: 442px; vertical-align: top;">
		<!-- Diagram control placeholder BEGIN -->
		<ncwc:NChartControl id="nChartControl1" runat="server" Width="416px" Height="320px"  AjaxEnabled="True" AsyncAutoRefreshEnabled="True" AsyncCallbackTimeout="10000" AsyncRefreshInterval="1000" AsyncRequestWaitCursorEnabled="False" AsyncRefreshEnabled="True" OnAsyncCustomCommand="nChartControl1_AsyncCustomCommand" OnAsyncQueryCommandResult="nChartControl1_AsyncQueryCommandResult" OnAsyncRefresh="nChartControl1_AsyncRefresh">
		</ncwc:NChartControl>
		<!-- Diagram control placeholder END -->
	</td>
	<td id="exampleVDelimiterCell" class="DelimiterCell" rowspan="2">&nbsp;</td>
	<td id="exampleConfigurationCell" class="ControlsPanel" rowspan="2" style="width: 300px;">
		<!-- Configuration controls panel placeholder BEGIN -->
		<div id="comment1Paragraph" class="Nested" style="width: 230px; text-align: justify;">
		    The client side image map is updated on every auto refresh event. Right-click
		    on the torus chart for a custom context menu. The exploded sector will still
		    dislpay the default web browser menu as it has no interactivity style specified.
		</div>
		<label for="autoRefreshCheckbox"><input id="autoRefreshCheckbox" name="autoRefreshCheckbox" type="checkbox" onclick="UpdateState();" /> Enable auto-refresh</label><br />
        &nbsp;<br />
		&nbsp;<input id="customCommandButton" onclick="InvokeQueryAngleCustomCommand();" type="button" value="Invoke Custom Command" style="width: 200px;" /><br />
		&nbsp;<span id="infoSpan"></span><br />
        &nbsp;<br />
        &nbsp;<br />
		<div id="comment2Paragraph" class="Nested" style="width: 230px; text-align: justify;">
		    The "Rotate by 10 Degrees" button operation does not refresh the client-side image map.
		    Use the "Force Update Image Map" button to get updated image map data.
		</div>
		&nbsp;<input id="rotate10DrgreesButton" onclick="InvokeRotate10DegreesCustomCommand();" type="button" value="Rotate by 10 Degrees" style="width: 200px;" /><br />
		&nbsp;<input id="queryXmlImageMapButton" onclick="InvokeQueryXmlImageMapCommand();" type="button" value="Force Update Image Map" style="width: 200px;" /><br />
        <!-- Configuration controls panel placeholder END -->
	</td>
</tr>
<tr>
	<td id="exampleDescriptionCell" class="Description">
		<!-- Description box placeholder BEGIN -->
        This example demonstrates how custom commands and return data can be used.
        <br />&nbsp;<br />
        Custom commands are provided to allow the developer to execute callback requests
        synchronously to a specific web control.
        <br />&nbsp;<br />
        Return data is useful when feedback from the server has to be acquired.
        The feedback is received by the client script as a chunk of XML that is 
        parsed and accessed through the NAjaxXmlTransport JavaScript class.
        Custom return data can be provided by the server for both custom
        and built-in commands (like refresh and mouse move event commands).<br />
		<!-- Description box placeholder END -->
	</td>
</tr>
</table>
<!-- Example layout END -->

<!-- Custom JavaScript placeholder BEGIN -->
<script type="text/javascript" language="javascript">
<!--
	//  sends a custom command to the server using async callback
	function InvokeRotate10DegreesCustomCommand()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		cs.InvokeCustomCommand("rotate10Degrees", null);
	}
	
	//  sends a custom command to the server using async callback
	//  the command is processed at the server and a value is returned
	//  the returned value is processed in the CallbackSucceeded event handler, implemented below
	function InvokeQueryAngleCustomCommand()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		cs.InvokeCustomCommand("queryCurrentAngle", null);
	}
	
	//  sends a predefined command (a query the xml image map command) to the server using async callback
	//  the command is processed at the server and an image map object is constructed and returned
	//  the returned object is processed in the CallbackSucceeded event handler, implemented below
	function InvokeQueryXmlImageMapCommand()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		cs.QueryXmlImageMap();
	}
	
	function OnContextMenuCommand(command, arg1, arg2)
	{
		if(typeof(NChartCallbackService) == "undefined")
			return false;
			
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		switch(command)
		{
		    case "changeColor":
			    var attributes = new Array();
			    attributes["color"] = arg1;
			    attributes["id"] = arg2;
		        cs.InvokeCustomCommand("changeColor", attributes);
		        break;
		    case "close":
		        break;
		}
		
		var cmDiv = document.getElementById('customContextMenuDiv');
		if(NReflection.IsInstance(cmDiv))
		    document.body.removeChild(cmDiv);
		return true;
	}

    //  updates the html form controls to reflect the state of the callback service
	function ReadState()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");

		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		
		autoRefreshCheckbox.checked = cs.GetAutoRefreshEnabled();
	}

    //  updates the state of the callback service to reflect the html form controls
	function UpdateState()
	{
		if(typeof(NChartCallbackService) == "undefined")
			return;
			
		var autoRefreshCheckbox = document.getElementById("autoRefreshCheckbox");
		
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');
		var prevAutoRefreshState = cs.GetAutoRefreshEnabled();
		
		cs.SetAutoRefreshEnabled(autoRefreshCheckbox.checked);

		if(autoRefreshCheckbox.checked && prevAutoRefreshState == false)
			cs.Refresh();
	}
	
	//  event handler that is invoked when an async command is completed successfully
	//  event handling code is provided for desired commands only
	//  this handler is attached to the AsyncCallbackSucceeded event at the end of the JavaScript block
	function CallbackSucceeded(self, result, context)
	{
		switch(context.command)
		{
			case 'queryCurrentAngle':
				var transport = new NAjaxXmlTransport();
				transport.Deserialize(result);
				if(!NReflection.IsInstance(transport.DataSections["angle"]))
					break;
				
				var angleText = transport.DataSections["angle"].Data;
        		var infoSpan = document.getElementById("infoSpan");
        		infoSpan.innerHTML = "<i>Current chart rotation angle: " + angleText + " degree(s)</i>";
				break;
		}
	}
	
	//  event handler for the mouse right click event
	//  please note that the Opera browser does not support mouse right click at all and
	//  this code will never execute under Opera
	//  this handler is attached to the MouseRClick event at the end of the JavaScript block
	function MouseRClick(self, eventTarget, pageOffset, screenOffset, localOffset)
	{
	    //  close context menu if one is open
	    OnContextMenuCommand("close");

	    //  test if the right click event from an image generated by a Nevron web control
		if(!NReflection.IsOfTag(eventTarget, "img") || !NReflection.HasProperty(eventTarget, "CallbackService"))
			return false;
		
		//	The full hierarchical id of the chart control must be used, e.g. "ctl04_nChartControl1"
		//	rather than just "nChartControl1". The "ctl04" is the id generated by the ASP.NET framework 
		//	for the user control hosting the chart control.
		var cs = NChartCallbackService.GetCallbackService('ctl04_nChartControl1');

		//  test if the right click event is from the exact Nevron web control
		if(eventTarget.CallbackService != cs)
			return false;
			
		//  perform the hit test
		var imageMapObjectItem = cs.HitTest(eventTarget.id, localOffset);
		//  null as a return value means that no element with proper interactivity style was right-clicked
		if(imageMapObjectItem == null)
			return false;
			
	    //  create a simple context menu
	    var cmDiv = document.createElement("div");
	    cmDiv.id = "customContextMenuDiv";
	    cmDiv.style.position = "absolute";
	    cmDiv.style.left = NBrowserCaps.ToPixelLength(pageOffset.offsetLeft);
	    cmDiv.style.top = NBrowserCaps.ToPixelLength(pageOffset.offsetTop);
	    cmDiv.style.width = NBrowserCaps.ToPixelLength(130);
	    cmDiv.style.height = NBrowserCaps.ToPixelLength(112);
	    cmDiv.style.zorder = "9999";
	    
	    cmDiv.style.fontFamily = "ms sans srif, ariel, sans serif";
	    cmDiv.style.fontSize = "10pt";
	    cmDiv.style.padding = "5px";
	    cmDiv.style.background = "whitesmoke";
	    cmDiv.style.border = "solid 1px black";
	    
	    var html = "";
	    var colorMeBlueOnClick = 'OnContextMenuCommand("changeColor", "blue", "' + imageMapObjectItem.itemId+ '");';
	    var colorMeRedOnClick = 'OnContextMenuCommand("changeColor", "red", "' + imageMapObjectItem.itemId+ '");';
	    var closeMeOnClick = 'OnContextMenuCommand("close");';

	    html += "<b> " + imageMapObjectItem.userData + " (id: " + imageMapObjectItem.itemId + ") </b>";
	    html += "<hr />";
	    html += "<a href='javascript:void();' onclick='" + colorMeBlueOnClick + "'>Paint me blue</a><br />";
	    html += "<a href='javascript:void();' onclick='" + colorMeRedOnClick + "'>Paint me red</a><br />";
	    html += "&nbsp;<br /><a href='javascript:void();' onclick='" + closeMeOnClick + "'>Close this menu</a><br />";
	    
	    cmDiv.innerHTML = html;
	    
	    document.body.appendChild(cmDiv);
	    
	    //  stop propagation and cancel the default action by returning true (e.g. handled)
		return true;
	}

	//  subscribe for the callback success sevent
	NEventSinkService.AsyncCallbackSucceeded.Subscribe(null, CallbackSucceeded);
	
	//  intercept the right click event at root level
	document.oncontextmenu = NEventSinkService.MouseRClickHandler;
	
	//  subscribe for the mouse right click sevent
	NEventSinkService.MouseRClick.Subscribe(null, MouseRClick);
	
	//  read the initial state of the callback service
	ReadState();
//-->
</script>
<!-- Custom JavaScript placeholder END -->
