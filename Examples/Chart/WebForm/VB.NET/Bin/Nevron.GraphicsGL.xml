<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.GraphicsGL</name>
    </assembly>
    <members>
        <member name="T:Nevron.GraphicsGL.GLDevice2D">
            <summary>
            Represents a 2D OpenGL accelerated device.
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.#ctor(Nevron.GraphicsCore.NRenderSurface)">
            <summary>
            Initializer constructor
            </summary>
            <param name="renderSurface"></param>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.SupportsAnimation">
            <summary>
            Determines whether this device supports animation.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.AnimationBounds">
            <summary>
            Gets or sets the animation bounds. Regarded only when AnimationBoundsMode is set to context
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.ClearStyles(Nevron.GraphicsCore.DeviceStyle)">
            <summary>
            Clears style state and optionally updates the painter 
            </summary>
            <param name="styles"></param>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.RenderTechnology">
            <summary>
            Obtains the rendering technology of the device
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.ActivateStyles(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NImageFiltersStyle)">
            <summary>
            Batch style activation
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="imageFiltersStyle"></param>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.FillStyle">
            <summary>
            Gets / sets the current fill style.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.FillColor">
            <summary>
            Sets the current fill color.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.StrokeStyle">
            <summary>
            Gets / sets the current stroke style.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.FontStyle">
            <summary>
            Gets / sets the current font style.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.FontAscent">
            <summary>
            Gets the current font ascent
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.FontDescent">
            <summary>
            Gets the current font descent
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.SpaceSize">
            <summary>
            Gets the current font space size
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.ImageFiltersStyle">
            <summary>
            Gets / sets the current image filters style.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.Painter">
            <summary>
            Obtains the current painter
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.Transform">
            <summary>
            Gets/sets the world transformation for this device object.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.TextureBoundsProvider">
            <summary>
            The bounds providers used to calculate bounds for texture mapping
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.ClipPath">
            <summary>
            Gets / sets the current clip path
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.ClipInfo">
            <summary>
            Gets / sets the current clip path
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.ImageFiltersBoundsProvider">
            <summary>
            The bounds privder used to calculate bounds for image filters canvas
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.TextureMappingOrientation">
            <summary>
            The orientation applied on textures when mapping them on objects
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.ShapeRenderingMode">
            <summary>
            Gets/sets the shape rendering mode
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.TextRenderingMode">
            <summary>
            Gets/sets the text rendering mode.
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Applies the specified translation to the transformation matrix of this Graphics object.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="matrixOrder"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this Graphics object by prepending it to the object's transformation matrix.
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="matrixOrder"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Applies the specified rotation to the transformation matrix of this Graphics object.
            </summary>
            <param name="angle"></param>
            <param name="matrixOrder"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.ResetTransform">
            <summary>
            Resets the world transformation matrix of this Graphics object to the identity matrix.
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.ColorTransform">
            <summary>
            Gets / sets the color transform object associated with this device
            </summary>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.Palette">
            <summary>
            Gets / sets the device color palette
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.Clear">
            <summary>
            Clears all current drawings fromt he render surface this device is attached to.
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.Clear(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NPointF)">
            <summary>
            Draws the specified Image object, using its original physical size, at the specified location.
            </summary>
            <param name="image"></param>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the specified Image object to the specified rectangle
            </summary>
            <param name="image"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Draws the specified portion of the specified Image object at the specified location and with the specified size.
            </summary>
            <param name="image"></param>
            <param name="destRect"></param>
            <param name="srcRect"></param>
            <param name="srcUnit"></param>
        </member>
        <member name="P:Nevron.GraphicsGL.GLDevice2D.CanCachePath">
            <summary>
            Whether the graphics can cache paths
            </summary>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.CachePath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Returns the cached path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.IsCacheValid(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.INPathCache,System.Boolean)">
            <summary>
            Returns true if the specified cache is valid 
            </summary>
            <param name="path"></param>
            <param name="cache"></param>
            <param name="comparePaths"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.PaintCachedPath(Nevron.GraphicsCore.INPathCache)">
            <summary>
            Paints the cached path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.PG(System.Object,System.Single,System.Single,System.Single,System.Single,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="glyphRaster"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.PD(System.Object,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.MeasureString(System.String)">
            <summary>
            Measures the specified string when drawn with the active font style.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.MeasureString(System.String,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Measures the specified string when drawn with the active font style.
            </summary>
            <param name="s"></param>
            <param name="layoutArea"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.MeasureString(System.String,System.Int32,System.Int32)">
            <summary>
            Measures the portion of the string specified by the start and end indices when drawn with the active font style.
            </summary>
            <param name="s"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.GraphicsGL.GLDevice2D.SetDefaultFontStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.SupportsAnimation">
            <summary>
            Determines whether this device supports animation.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.AnimationBounds">
            <summary>
            Gets or sets the animation bounds. Regarded only when AnimationBoundsMode is set to context
            </summary>
        </member>
        <member name="M:Nevron.Internal.lvec.ClearStyles(Nevron.GraphicsCore.DeviceStyle)">
            <summary>
            Clears style state and optionally updates the painter 
            </summary>
            <param name="wvec"></param>
        </member>
        <member name="P:Nevron.Internal.lvec.RenderTechnology">
            <summary>
            Obtains the rendering technology of the device
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.FillStyle">
            <summary>
            Gets / sets the current fill style.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.FillColor">
            <summary>
            Sets the current fill color.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.StrokeStyle">
            <summary>
            Gets / sets the current stroke style.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.ImageFiltersStyle">
            <summary>
            Gets / sets the current image filters style.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.Painter">
            <summary>
            Obtains the current painter
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.Transform">
            <summary>
            Gets/sets the world transformation for this device object.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.TextureBoundsProvider">
            <summary>
            The bounds providers used to calculate bounds for texture mapping
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.ClipPath">
            <summary>
            Gets / sets the current clip path
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.ClipInfo">
            <summary>
            Gets / sets the current clip path
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.ImageFiltersBoundsProvider">
            <summary>
            The bounds privder used to calculate bounds for image filters canvas
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.TextureMappingOrientation">
            <summary>
            The orientation applied on textures when mapping them on objects
            </summary>
        </member>
        <member name="M:Nevron.Internal.lvec.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Applies the specified translation to the transformation matrix of this Graphics object.
            </summary>
            <param name="xvec"></param>
            <param name="yvec"></param>
            <param name="awec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this Graphics object by prepending it to the object's transformation matrix.
            </summary>
            <param name="bwec"></param>
            <param name="cwec"></param>
            <param name="dwec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Applies the specified rotation to the transformation matrix of this Graphics object.
            </summary>
            <param name="ewec"></param>
            <param name="fwec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.ResetTransform">
            <summary>
            Resets the world transformation matrix of this Graphics object to the identity matrix.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.ColorTransform">
            <summary>
            Gets / sets the color transform object associated with this device
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.Palette">
            <summary>
            Gets / sets the device color palette
            </summary>
        </member>
        <member name="M:Nevron.Internal.lvec.Clear">
            <summary>
            Clears all current drawings fromt he render surface this device is attached to.
            </summary>
        </member>
        <member name="M:Nevron.Internal.lvec.Clear(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="gwec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NPointF)">
            <summary>
            Draws the specified Image object, using its original physical size, at the specified location.
            </summary>
            <param name="hwec"></param>
            <param name="iwec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the specified Image object to the specified rectangle
            </summary>
            <param name="jwec"></param>
            <param name="kwec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Draws the specified portion of the specified Image object at the specified location and with the specified size.
            </summary>
            <param name="lwec"></param>
            <param name="mwec"></param>
            <param name="nwec"></param>
            <param name="owec"></param>
        </member>
        <member name="P:Nevron.Internal.lvec.FontStyle">
            <summary>
            Gets / sets the current font style.
            </summary>
        </member>
        <member name="P:Nevron.Internal.lvec.TextRenderingMode">
            <summary>
            Gets/sets the text rendering mode.
            </summary>
        </member>
        <member name="M:Nevron.Internal.lvec.SetDefaultFontStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.lvec.MeasureString(System.String)">
            <summary>
            Measures the specified string when drawn with the active font style.
            </summary>
            <param name="pwec"></param>
        </member>
        <member name="M:Nevron.Internal.lvec.MeasureString(System.String,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Measures the specified string when drawn with the active font style.
            </summary>
            <param name="qwec"></param>
            <param name="rwec"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.lvec.MeasureString(System.String,System.Int32,System.Int32)">
            <summary>
            Measures the portion of the string specified by the start and end indices when drawn with the active font style.
            </summary>
            <param name="swec"></param>
            <param name="twec"></param>
            <param name="uwec"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hbgc.GetBitmapHolder(System.Drawing.Imaging.PixelFormat,Nevron.GraphicsCore.NResolution)">
            <summary>
            Gets a bitmap representing the render surface
            </summary>
            <param name="wbgc"></param>
            <param name="xbgc"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hbgc.GetBitmap(System.Boolean@)">
            <summary>
            Gets the current bitmap of the render surface
            </summary>
            <param name="ybgc">if this value is set to true you must dispose the bitmap</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hbgc.SetTransparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.lcgc.Invalidate">
            <summary>
            Invalidates the contents of the render suface
            </summary>
        </member>
        <member name="M:Nevron.Internal.lcgc.Paint(System.Object,System.Windows.Forms.PaintEventArgs,Nevron.GraphicsCore.INContentPainter)">
            <summary>
            Called to paint the render surface on the specified args and with the specified content
            </summary>
            <param name="wcgc"></param>
            <param name="xcgc"></param>
            <param name="ycgc"></param>
        </member>
        <member name="M:Nevron.Internal.lcgc.SetControlStyles(System.Boolean,System.Boolean,Nevron.GraphicsCore.INControlStyleControl)">
            <summary>
            
            </summary>
            <param name="adgc"></param>
            <param name="bdgc"></param>
            <param name="cdgc"></param>
        </member>
        <member name="M:Nevron.Internal.lcgc.BeforeOverlayPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called before any overlay drawing commands are executed to the device attached to this render surface
            </summary>
        </member>
        <member name="M:Nevron.Internal.lcgc.AfterOverlayPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called after any overlay drawing commands are executed to the device attached to this render surface
            </summary>
        </member>
        <member name="P:Nevron.Internal.ofgc.RequiresInteractivity">
            <summary>
            Returns true if the device requires interactivity
            </summary>
        </member>
        <member name="M:Nevron.Internal.ofgc.ActivateInteractivityStyle(Nevron.GraphicsCore.NInteractivityStyle)">
            <summary>
            Activates the specified interactivity style
            </summary>
            <param name="rfgc"></param>
        </member>
        <member name="M:Nevron.Internal.ofgc.ActivateElement(Nevron.Dom.INElement)">
            <summary>
            Activates an element.
            </summary>
            <param name="sfgc"></param>
        </member>
        <member name="M:Nevron.Internal.ofgc.ActivateAtomicElement(Nevron.Dom.INAtomicElement)">
            <summary>
            Activates an atomic element.
            </summary>
            <param name="tfgc"></param>
        </member>
        <member name="M:Nevron.Internal.ofgc.ActivateAtom(System.Int32)">
            <summary>
            Activates an atom.
            </summary>
            <param name="xfgc"></param>
        </member>
        <member name="P:Nevron.Internal.ofgc.Resolution">
            <summary>
            Gets the resolution of this Device object.
            </summary>
        </member>
        <member name="P:Nevron.Internal.ofgc.LengthConverter">
            <summary>
            Gets the length converter associated with this device
            </summary>
        </member>
        <member name="P:Nevron.Internal.ofgc.RenderTechnology">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.ofgc.RenderSurface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.ofgc.ColorTransform">
            <summary>
            Gets / sets the color transform object associated with this device
            </summary>
        </member>
        <member name="P:Nevron.Internal.ofgc.Palette">
            <summary>
            Gets / sets the device color palette
            </summary>
        </member>
        <member name="M:Nevron.Internal.ofgc.DisposeUnusedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.rogc.SupportsVertexBuffers">
            <summary>
            Returns true if the render surface supports vertex buffers
            </summary>
        </member>
        <member name="P:Nevron.Internal.rogc.SupportsShaders">
            <summary>
            Returns true if the render surface supports shaders
            </summary>
        </member>
        <member name="M:Nevron.Internal.ypgc.GetHashCode">
            <summary>
            Overriden to remove compile warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.xqgc.Paint(System.Object,System.Windows.Forms.PaintEventArgs,Nevron.GraphicsCore.INContentPainter)">
            <summary>
            Called to paint the render surface on the specified args and with the specified content
            </summary>
            <param name="brgc"></param>
            <param name="crgc"></param>
            <param name="drgc"></param>
        </member>
        <member name="M:Nevron.Internal.xqgc.SetControlStyles(System.Boolean,System.Boolean,Nevron.GraphicsCore.INControlStyleControl)">
            <summary>
            
            </summary>
            <param name="hrgc"></param>
            <param name="irgc"></param>
            <param name="jrgc"></param>
        </member>
        <member name="M:Nevron.Internal.xqgc.Activate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.xqgc.BeforePaint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.xqgc.AfterPaint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.xqgc.Invalidate">
            <summary>
            Invalidates the contents of the render suface
            </summary>
        </member>
        <member name="M:Nevron.Internal.pboc.Dispose">
            <summary>
            Destroys the texture
            </summary>
        </member>
        <member name="M:Nevron.Internal.gcoc.Dispose">
            <summary>
            Destroys the texture
            </summary>
        </member>
        <member name="M:Nevron.Internal.qcoc.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="tcoc"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.qcoc.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.saqc.Dispose">
            <summary>
            Destroys the texture
            </summary>
        </member>
    </members>
</doc>
