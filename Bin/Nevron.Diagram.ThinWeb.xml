<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Diagram.ThinWeb</name>
    </assembly>
    <members>
        <member name="T:Nevron.Diagram.ThinWeb.NTogglePanToolAction">
            <summary>
            Toggles the pan tool
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NTogglePanToolAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NToggleRectZoomToolAction">
            <summary>
            Toggles the rect zoom tool
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NToggleRectZoomToolAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NToggleViewLayoutAction">
            <summary>
            Zooms in the control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NToggleViewLayoutAction.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NToggleViewLayoutAction.#ctor(Nevron.Diagram.CanvasLayout)">
            <summary>
            Initializer constructor
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NToggleViewLayoutAction.#ctor(Nevron.Diagram.CanvasLayout,System.Boolean,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="layout"></param>
            <param name="resetZoom"></param>
            <param name="tooltip"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NZoomInAction">
            <summary>
            Zooms in the control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NZoomInAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NZoomOutAction">
            <summary>
            Zooms out the control
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramImageFormatProvider">
            <summary>
            Summary description for NDiagramImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramImageFormatProvider.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramImageFormatProvider.m_Control">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramPdfImageFormatProvider">
            <summary>
            Summary description for NDiagramPdfImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramPdfImageFormatProvider.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view">view associated with the image provider</param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramPdfImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramPdfImageFormatProvider.CreateCanvas(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called by the OnPrintPage method to create a canvas, which can be used to print the current page on the printer graphics
            </summary>
            <param name="canvasBounds">bounds of the canvas (page bounds)</param>
            <param name="windowBounds">bounds of the window (margins bounds)</param>
            <returns>canvas used for the rendering of the current page</returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramPdfImageFormatProvider.ComputePagingCore(Nevron.Diagram.Extensions.NCanvas,Nevron.GraphicsCore.NPdfImageFormat,System.Int32@,System.Int32@)">
            <summary>
            Core implementation of the print document paging layout, that zooms the document according 
            to the print manager print layout mode and returns the count of rows and columns.
            </summary>
            <param name="canvas"></param>
            <param name="imageFormat"></param>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramPdfImageFormatProvider.ExportedDocument">
            <summary>
            Obtains a reference to the document which must be printed
            </summary>
            <remarks>
            If the originally passed document has an absolute measurement unit then this property returns
            the value of the Document property. Otherwise it creates a copy of the original document, 
            which is then converted to millimeters
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramRasterImageFormatProvider">
            <summary>
            Summary description for NDiagramRasterImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramRasterImageFormatProvider.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramRasterImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides a raster image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramRasterImageFormatProvider.UpdateBitmap(System.Drawing.Bitmap,Nevron.GraphicsCore.NResolution)">
            <summary>
            Must override to update the internally created bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="resolution"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramSvgImageFormatProvider">
            <summary>
            Summary description for NDiagramSvgImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramSvgImageFormatProvider.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramSvgImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramSwfImageFormatProvider">
            <summary>
            Summary description for NDiagramSwfImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramSwfImageFormatProvider.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramSwfImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramXamlImageFormatProvider.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramXamlImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.INDrawingDocumentSerializationCallback.Serialize(Nevron.Diagram.ThinWeb.NThinDiagramControl,Nevron.Diagram.NDrawingDocument)">
            <summary>
            Serializes the passed document
            </summary>
            <param name="control"></param>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.INDrawingDocumentSerializationCallback.Deserialize(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Deserializes the passed document
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramServerSettings">
            <summary>
            Provides various settings related to chart tiling
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramServerSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramServerSettings.ShowLoaderImages">
            <summary>
            Whether to show loader images when using tiling
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramServerSettings.TilingMode">
            <summary>
            Whether tiling is enabled
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramServerSettings.AutoTilingThreshold">
            <summary>
            Gets / sets the automatic tiling threshold
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramServerSettings.TileSize">
            <summary>
            Gets / sets the tile size
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramServerSettings.l1I1IlII11">
            <summary>
            Whether tiling is enabled
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramServerSettings.l1I1IlII1I">
            <summary>
            Automatic tiling threshold size (diagram switches to tiling mode when the virtual size in height or width
            exceeds this setting)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramServerSettings.l1I1IlIIIl">
            <summary>
            The tile size
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramServerSettings.l1I1IlIII1">
            <summary>
            Whether to show loader images when using tiling
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramView">
            <summary>
            Provides various settings related to diagram zooming and panning.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.WindowOrigin">
            <summary>
            Gets / sets the viewport origin.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.Layout">
            <summary>
            Gets / sets the layout.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.ZoomFactor">
            <summary>
            Gets / sets the zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.ZoomPercent">
            <summary>
            Gets / sets the percent with which zoom in / out commands modify the zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.MinZoomFactor">
            <summary>
            Gets / sets the minimum zoom factor value.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.MaxZoomFactor">
            <summary>
            Gets / sets the maximum zoom factor value.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.GlobalVisibility">
            <summary>
            Controls the global visilbity of elements and effects.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NDiagramView.WindowBounds">
            <summary>
            Gets / sets the window bounds.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramView.SizeToContent">
            <summary>
            Resizes the drawing view to fit the document content
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramView.ClientViewToWindow(Nevron.GraphicsCore.NPointF)">
            <summary>
            Converts a point from client view coordinates to window coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.l1I1I1lllI">
            <summary>
            The bounds of the diagram window inside the client host view. 
            These bounds may be smaller than control.ViewDimensions, because
            the diagram natural size can be smaller than the host.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.m_GlobalVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.l1I1I1ll1l">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.m_Layout">
            <summary>
            The canvas layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.m_ZoomFactor">
            <summary>
            The zoom factor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.l1I1I1ll11">
            <summary>
            The minimum zoom factor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.m_MaxZoomFactor">
            <summary>
            The maximum zoom factor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ThinWeb.NDiagramView.l1I1I1ll1I">
            <summary>
            The zoom step
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NThinDiagramControl">
            <summary>
            Represents a ThinWeb Diagram control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.DocumentSerializationCallback">
            <summary>
            Gets / sets the document serialization callback which allows you to custom serialize / deserialize the drawing document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.Document">
            <summary>
            Gets the chart document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.ServerSettings">
            <summary>
            Gets / sets the diagram settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.View">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.Controller">
            <summary>
            Gets the tools attached to this control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.CreateCanvas(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Creates a new canvas
            </summary>
            <param name="size"></param>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l1I1I111Il(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Creates a new raster view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l1I1I111Il">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111I111ll">
            <summary>
            Gets the common control settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111I11111">
            <summary>
            Gets the desing time text emitted by the control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.HitTest(Nevron.GraphicsCore.NPointF)">
            <summary>
            Returns a NNodeList collection containing all visual objects at the given window coordinates.
            </summary>
            <param name="point">
            A point containing the hit-test coordinates.
            </param>
            <returns>
            A <see cref="T:Nevron.Dom.NNodeList"/> object containing all visual objects at the given window coordinates.
            </returns>
            <remarks>
            Objects with highter z-order have greater index in the collection.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.ZoomToRect(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Zooms to the specified rectangle in view coordinates
            </summary>
            <param name="viewBounds"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.CreatetHitTestContext">
            <summary>
            Provides a valid hit test context, which can be used for document hit tests
            </summary>
            <returns>document hit test context</returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.Zoom(System.Single)">
            <summary>
            Applies equal X and Y scales of the view and preserves the current viewport center
            </summary>
            <param name="zoomFactor">zoom factor</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.Zoom(System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Applies equal X and Y scales of the view and makes the specified point the new viewport center.
            </summary>
            <param name="zoomFactor">zoom factor</param>
            <param name="viewportCenter">new viewport center</param>
            <returns>true if zoomed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.IsValidScaleFactor(System.Single)">
            <summary>
            Determines whether the specified scale factor is valid
            </summary>
            <remarks>
            This method takes into account the document settings MinZoomFactor and MaxZoomFactor properties.
            </remarks>
            <param name="scaleFactor">scale factor</param>
            <returns>true if the scale factor is valid, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.SizeToContent">
            <summary>
            Resizes the drawing view to fit the document content
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.GetImage(Nevron.GraphicsCore.INImageFormat,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.GetImageMap">
            <summary>
            Get an image map
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111IIllIl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l1I1I111I1(Nevron.GraphicsCore.NRectangle)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l1I1I11111(Nevron.GraphicsCore.NRectangle)">
            <summary>
            
            </summary>
            <param name="htmlMapContext"></param>
            <param name="textWriter"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.GetController">
            <summary>
            Gets an untyped controller
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111I111lI">
            <summary>
            Initializes the request map
            </summary>
            <param name="requestMap"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111IIl1ll(System.Boolean)">
            <summary>
            
            </summary>
            <param name="declareHostVariable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111IIl1l1(Nevron.Serialization.PersistencyFormat)">
            <summary>
            Saves the document state in the specified peristency format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.l111IIl1lI(Nevron.Serialization.PersistencyFormat,System.Byte[])">
            <summary>
            Loads the document state from the specified peristency format
            </summary>
            <param name="format"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.GetHttpHandlerType">
            <summary>
            Gets the http handler type for service requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.NThinDiagramControlHttpHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the IHttpHandler instance.
            </summary>
            <remarks>
            Returns true.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NThinDiagramControlHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramControlDesigner">
            <summary>
            Provides design time support.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramControlDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlIlII">
            <summary>
            Applies the specified diagram layout
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIlII.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlIlII.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIlII.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1l1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1l1.Instance">
            <summary>
            Gets the chart request map instance
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlI1ll">
            <summary>
            Updates the H Scrollbar position
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1ll.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1ll.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1ll.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1ll.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlI1lI">
            <summary>
            Updates the H Scrollbar position
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1lI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1lI.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1lI.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1lI.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlI1Il">
            <summary>
            Updates the H Scrollbar position
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1Il.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1Il.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1Il.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1Il.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlIlI1">
            <summary>
            Base for all tiled requests
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIlI1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlIlI1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIlI1.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIlI1.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlIIl1">
            <summary>
            Zooms in / out a rectange on the diagram
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIIl1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlIIl1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIIl1.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIIl1.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlI111">
            <summary>
            Zooms in the diagram
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI111.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI111.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI111.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlI11I">
            <summary>
            Streams non tiled image content to the client
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI11I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI11I.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI11I.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NDiagramTool">
            <summary>
            The base of all diagram tools
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NDiagramTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NPanTool.AppendCommands(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.NRectZoomTool">
            <summary>
            Represents a tool that allows the user to zoom in / out a diagram using a rectangular selection.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NRectZoomTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.NRectZoomTool.AppendCommands(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlI1II">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I11l11">
            <summary>
            Gets the document bounds in world coordinates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1II.Viewport">
            <summary>
            Gets the document viewport
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1II.Window">
            <summary>
            Gets the document window
            </summary>
        </member>
        <member name="P:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I11l1I">
            <summary>
            Gets the virtual size
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.SetParams(Nevron.Diagram.CanvasLayout,Nevron.GraphicsCore.NSize,System.Single)">
            <summary>
            Sets the view parameters - this will initialize all scaling factors and prepare the view for 
            positioning (by calling SetWindowOrigin or SetViewportOrigin)
            </summary>
            <param name="layout"></param>
            <param name="windowSize"></param>
            <param name="zoomFactor"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I11lI1(Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the window origin
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I11lII(Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the viewport origin
            </summary>
            <param name="viewportOrigin"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.Paint(Nevron.GraphicsCore.l11lIII11,Nevron.Diagram.PaintReason)">
            <summary>
            Paints the document to the specified device
            </summary>
            <param name="device"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.CreatePaintContext(Nevron.GraphicsCore.l11lIII11)">
            <summary>
            Creates a new paint context attached to the specified device
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I111ll(Nevron.GraphicsCore.NPointF)">
            <summary>
            Converts a view coordinate to device coordinate
            </summary>
            <param name="viewPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I111l1(Nevron.GraphicsCore.NPointF)">
            <summary>
            Converts a device coordinate to view coordinate
            </summary>
            <param name="devicePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I111lI(Nevron.GraphicsCore.NPointF)">
            <summary>
            Clamps the viewport origin
            </summary>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.GetBitmap">
            <summary>
            Gets a bitmap of the whole diagram
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.GetImageMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I1111l(Nevron.GraphicsCore.NRectangle)">
            <summary>
            Renders a bitmap tile
            </summary>
            <param name="windowBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I11111(Nevron.GraphicsCore.NRectangle)">
            <summary>
            
            </summary>
            <param name="windowBounds"></param>
            <param name="context"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1II.l1I1I1111I(Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NSize@)">
            <summary>
            Positions the current vieport so that its location maps to window.Location
            </summary>
            <param name="windowBounds"></param>
            <param name="windowSize">the effective window bounds</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI1I1.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI11l.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI11l.CalculateWindowParams(System.Int32,System.Boolean@,System.Boolean@,Nevron.GraphicsCore.NSize@,Nevron.GraphicsCore.NRectangle@)">
            <summary>
            Calcualtes the win
            </summary>
            <param name="hasHScrollbar"></param>
            <param name="hasVScrollbar"></param>
            <param name="documentSize"></param>
            <param name="viewportSize"></param>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlI11l.CalculateSmallChange(System.Int32)">
            <summary>
            Caclulates the small change of the scrollbar (in pixels)
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.ThinWeb.l1I1IlIIll">
            <summary>
            Represents a diagram view that partitions the document virtual size into tiles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.ThinWeb.l1I1IlIIll.#ctor(Nevron.Diagram.ThinWeb.NThinDiagramControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
    </members>
</doc>
