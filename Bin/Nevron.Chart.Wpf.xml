<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Chart.Wpf</name>
    </assembly>
    <members>
        <member name="T:Nevron.Chart.Wpf.NChartControlSerializer">
            <summary>
            Represents a chart control serializer
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.#ctor(Nevron.Chart.Wpf.NChartControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.SaveControlStateToFile">
            <summary>
            Shows a save file dialog and saves the current control state to file.
            </summary>
            <returns></returns>
            <remarks>
            The function returns true if the state was successfully saved. This function may trow a serialization exception.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.LoadControlStateFromFile">
            <summary>
            Shows an open file dialog and loads the control state from the file.
            </summary>
            <returns></returns>
            <remarks>
            The function returns true if the state was successfully loaded. This function may trow a serialization exception.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.SaveControlStateToFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Saves the current state of the chart control to a file in the specified format.
            </summary>
            <param name="filePath">A relative or absolute path for the output file.</param>
            <param name="format">The format of the file.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.LoadControlStateFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Loads an existing chart state to the chart control from a file.
            </summary>
            <param name="filePath">A relative or absolute path for the input file.</param>
            <param name="format">The format of the file.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
            <example>
            The following example loads a new state and repaints the control:
            <code lang = 'VB'>
            nChartControl1.Serializer.LoadControlStateFromFile("c:\chart.bin", PersistencyFormat.Binary, Nothing)
            nChartControl1.Refresh()
            </code>
            <code>
            nChartControl1.Serializer.LoadControlStateFromFile("c:\chart.bin", PersistencyFormat.Binary, null);
            nChartControl1.Refresh();
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.SaveControlStateToStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Saves the chart control state in the passed stream.
            </summary>
            <param name="stream">The stream to load the state from.</param>
            <param name="format">The format of the stream.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            You're responsible for the stream creation and closure. The filter parameter is used only when the format is CustomXML or CustomBinary.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.LoadControlStateFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Loads the chart control state from the passed stream.
            </summary>
            <param name="stream">The stream to save the state to.</param>
            <param name="format">The format of the stream.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            You're responsible for the stream creation and closure. The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.LoadState(System.Object)">
            <summary>
            Loads the control state from an object
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlSerializer.lIl11lIlIl">
            <summary>
            Gets the file filter for save / load dialogs
            </summary>
        </member>
        <member name="T:Nevron.Chart.Wpf.NChartControlState">
            <summary>
            Summary description for NChartControlState.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControlState.#ctor(Nevron.Chart.NChartDocumentState)">
            <summary>
            Initializer constructor
            </summary>
            <param name="documentState"></param>
        </member>
        <member name="T:Nevron.Chart.Wpf.NChartControl">
            <summary>
            The NChartControl class represents Nevron Chart for .NET used in Wpf.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NChartControl.PixelSize">
            <summary>
            Gets the pixel size of the control
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NChartControl.View">
            <summary>
            Gets the View of this control
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.GetMousePosition(System.Windows.Input.MouseEventArgs)">
            <summary>
            Gets the mouse position of the specified mouse event args in chart view coordinates
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.Refresh">
            <summary>
            Forces the control to redraw itself
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.RefreshOverlay">
            <summary>
            Forces the control to refresh only the overlay content (cursors, range selections etc.)
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NChartControl.Controller">
            <summary>
            Retrieves the controller of the chart.
            </summary>
            <remarks>
            The controller object contains a collection of tools. The tools define the way in which 
            the control responds to user actions.
            </remarks>
            <summary>
            Retrieves the controller of the chart.
            </summary>
            <remarks>
            The controller object contains a collection of tools. The tools define the way in which 
            the control responds to user actions.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a NHitTestResult object describing the object at the given window coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>Position is in pixels</returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.HitTest(System.Drawing.Point)">
            <summary>
            Returns a NHitTestResult object describing the object at the given window coordinates.
            </summary>
            <param name="pt"></param>
            <returns>Position is in pixels</returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.HitTest(Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Returns a NHitTestResult object describing the object at the given window rect.
            </summary>
            <param name="rect"></param>
            <param name="containOrIntersect">whether hit testing returns only object completely contained 
            withing the rect or object that intersect the rect as well</param>
            <returns>Rect is in pixels</returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.HitTest">
            <summary>
            Returns NHitTestResult object describing the object which is currently under the mouse
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.HitTest(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Returns NHitTestResult object describing the object which is currently under the mouse
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Overriden to render a writable bitmap
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.Dip2Px(System.Double)">
            <summary>
            Converts a dip to pixel
            </summary>
            <param name="dip"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NChartControl.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the ActualWidth or ActualHeight of the framework element has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Wpf.NState">
            <summary>
            Summary description for NState.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface">
            <summary>
            OpenGL bitmap rendering surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.#ctor(Nevron.GraphicsGL.l1IlllI1II,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Initializer constructor
            </summary>
            <param name="settings"></param>
            <param name="size"></param>
            <param name="resolution"></param>
            <param name="useOpenGL2DGraphics"></param>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.Is2D">
            <summary>
            Gets whether this is a window surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.Resize(Nevron.GraphicsCore.NSize)">
            <summary>
            Called to resize the render surface
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.Paint(System.Windows.Media.DrawingContext,Nevron.Chart.Wpf.NWpfChartControlView)">
            <summary>
            Paints the render surface on the target writable bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="view"></param>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.l1IlIlII1l">
            <summary>
            Whether this is a bitmap render surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.CreateMemoryDC">
            <summary>
            Creates the memory DC
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLBitmapRenderSurface.l1IlI1Ill1">
            <summary>
            Creates an output bitmap with the specified size
            </summary>
            <param name="rSize"></param>
            <param name="colorDepth"></param>
            <param name="openGL2DGraphics"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLRenderSurface.#ctor(Nevron.GraphicsGL.l1IlllI1II,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Initializer constructor
            </summary>
            <param name="settings"></param>
            <param name="size"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLRenderSurface.SetupPixelFormat(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hDC"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLRenderSurface.InitPixelFormatDescriptor(System.Int32)">
            <summary>
            Inits the pixel format descriptor
            </summary>
            <param name="flags"></param>
        </member>
        <member name="T:Nevron.Chart.Wpf.NWpfGdiRenderSurface">
            <summary>
            Represents a GDI bitmap render surface.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGdiRenderSurface.#ctor(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Creates a new bitmap render surface with the specified size and resolution
            </summary>
            <param name="size"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGdiRenderSurface.Paint(System.Windows.Media.DrawingContext,Nevron.Chart.Wpf.NWpfChartControlView)">
            <summary>
            Paints the render surface on the target writable bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="view"></param>
        </member>
        <member name="T:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface">
            <summary>
            OpenGL bitmap rendering surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.#ctor(Nevron.GraphicsGL.l1IlllI1II,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Initializer constructor
            </summary>
            <param name="settings"></param>
            <param name="size"></param>
            <param name="resolution"></param>
            <param name="useOpenGL2DGraphics"></param>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.Is2D">
            <summary>
            Gets whether this is a window surface
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.IsWindow">
            <summary>
            Gets whether this is a window surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.CreateWritableBitmap">
            <summary>
            Creates a writable bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.Paint(System.Windows.Media.DrawingContext,Nevron.Chart.Wpf.NWpfChartControlView)">
            <summary>
            Paints the render surface on the target writable bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="view"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.l1IlII1III">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.l1IlII1II1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.l1IlII1I1I(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfGLWindowRenderSurface.InnerWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Wpf.NWpfRenderSurface">
            <summary>
            Represents a GDI bitmap render surface.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.#ctor(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Initializer constructor
            </summary>
            <param name="size"></param>
            <param name="resolution"></param>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfRenderSurface.IsWindow">
            <summary>
            Gets whether this is a window surface
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfRenderSurface.Is2D">
            <summary>
            Gets whether this is a window surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.l111ll1lll(System.Boolean)">
            <summary>
            Clears the state of this render surface
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.Invalidate(System.Boolean,System.Boolean)">
            <summary>
            Invalidates the contents of this render surface
            </summary>
            <param name="content"></param>
            <param name="overlay"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.Resize(Nevron.GraphicsCore.NSize)">
            <summary>
            Called to resize the render surface
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.Invalidate">
            <summary>
            Invalidates the contents of the render suface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.GetWritableBitmap">
            <summary>
            Gets the current writable bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.CreateWritableBitmap">
            <summary>
            Creates a writable bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.Paint(System.Windows.Media.DrawingContext,Nevron.Chart.Wpf.NWpfChartControlView)">
            <summary>
            Paints the render surface on the target writable bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="view"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfRenderSurface.CopyBitmapRect(System.Drawing.Bitmap)">
            <summary>
            Copies a rectangle from the source bitmap to the desitionation bitmap. 
            The source and the target must be locked prior to the call.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="rect"></param>
        </member>
        <member name="T:Nevron.Chart.Wpf.NWpfChartControlView">
            <summary>
            Represents a chart view used to host the chart document in a Windows form control
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.#ctor(Nevron.Chart.Wpf.NChartControl)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="outerControl"></param>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.lIIll1lIl1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.lIIll1lIlI">
            <summary>
            Gets the inner window handle
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.OuterControl">
            <summary>
            Returns the outer control associated with this view
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.Controller">
            <summary>
            Gets or sets the controller of this control view
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.ServiceManager">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.Invalidate(System.Boolean)">
            <summary>
            Causes the view to repaint
            </summary>
            <param name="internalUpdate"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.InvalidateOverlay">
            <summary>
            Causes the view overlay to repaint
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.Paint(System.Windows.Media.DrawingContext)">
            <summary>
            Paints the view on the specified event args graphics
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.l1lIlI111I1">
            <summary>
            Returns true if this is a control view
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.Cursor">
            <summary>
            Gets / sets the mouse cursor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.lI1II1II11">
            <summary>
            Gets / sets the mouse capture
            </summary>
        </member>
        <member name="P:Nevron.Chart.Wpf.NWpfChartControlView.ClientMousePosition">
            <summary>
            Gets the mouse position in client coordinates
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.Focus">
            <summary>
            Focuses the view
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.SetTooltip(Nevron.GraphicsCore.NPointF,System.String,Nevron.Chart.Windows.NTooltipTool)">
            <summary>
            Sets a tooltip
            </summary>
            <param name="mousePosition"></param>
            <param name="tooltip"></param>
            <param name="tool"></param>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.ClearTooltip">
            <summary>
            Clears the tooltip
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.CreateContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.Wpf.NWpfChartControlView.lIIIIIlI11(System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="use2DSurface"></param>
            <param name="useWindowSurface"></param>
        </member>
    </members>
</doc>
