<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.ThinWeb</name>
    </assembly>
    <members>
        <member name="T:Nevron.ThinWeb.NAction">
            <summary>
            Base class for all client / server actions
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAction.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tooltip"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NAction.Tooltip">
            <summary>
            Gets / sets the tooltip of displayed by this action
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAction.UnpressOnResponse">
            <summary>
            Whether the button will be unpressed on control response or directly on the client. The default value is true
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAction.IsEnabled">
            <summary>
            Whether the action is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAction.GetScript">
            <summary>
            The client script to execute in response to this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAction.GetImage">
            <summary>
            Gets the image src of the action in case it is hosted in a visual element such as toolbar or menu
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.ThinWeb.NAction.m_Tooltip">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NCheckAction">
            <summary>
            Base class for all client / server check actions
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NSaveImageAction">
            <summary>
            Saves the control as image to the client
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveImageAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveImageAction.#ctor(System.String,Nevron.GraphicsCore.NImageFormat,System.Boolean,Nevron.GraphicsCore.NSize,System.Int32)">
            <summary>
            Initializer constuctor
            </summary>
            <param name="fileName"></param>
            <param name="imageFormat"></param>
            <param name="size"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveImageAction.#ctor(System.String,System.String,Nevron.GraphicsCore.NImageFormat,System.Boolean,Nevron.GraphicsCore.NSize,System.Int32)">
            <summary>
            Initializer constuctor
            </summary>
            <param name="fileName"></param>
            <param name="tooltip"></param>
            <param name="imageFormat"></param>
            <param name="autoSize"></param>
            <param name="size"></param>
            <param name="resolution"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NSaveImageAction.UnpressOnResponse">
            <summary>
            Whether the button will be unpressed on control response or directly on the client. The default value is true
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveImageAction.IsEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveImageAction.GetImage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveImageAction.GetScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NSaveStateAction">
            <summary>
            Saves the control state to the client
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveStateAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveStateAction.#ctor(System.String,Nevron.Serialization.PersistencyFormat)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fileName"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NSaveStateAction.UnpressOnResponse">
            <summary>
            Whether the button will be unpressed on control response or directly on the client. The default value is true
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveStateAction.IsEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveStateAction.GetImage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NSaveStateAction.GetScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NToggleAutoUpdateAction">
            <summary>
            Toggles the auto update of the control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleAutoUpdateAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleAutoUpdateAction.IsChecked">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleAutoUpdateAction.GetImage">
            <summary>
            Gets the image sources
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleAutoUpdateAction.GetScript">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleAutoUpdateAction.IsEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NToggleBrowserRedirectToolAction">
            <summary>
            Enables the browser redirect tool
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleBrowserRedirectToolAction.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NToggleBrowserRedirectToolAction.ToolType">
            <summary>
            Gets the tool type
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleBrowserRedirectToolAction.GetImage">
            <summary>
            Gets the image sources
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NToggleCursorToolAction">
            <summary>
            Enables the cursor change tool
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleCursorToolAction.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NToggleCursorToolAction.ToolType">
            <summary>
            Gets the tool type
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleCursorToolAction.GetImage">
            <summary>
            Gets the image sources
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NToggleTooltipToolAction">
            <summary>
            Enables the browser redirect tool
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleTooltipToolAction.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NToggleTooltipToolAction.ToolType">
            <summary>
            Gets the tool type
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToggleTooltipToolAction.GetImage">
            <summary>
            Gets the image sources
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NToolAction">
            <summary>
            Base class for all actions that enable client / server tools
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolAction.IsChecked">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NToolAction.IsEnabled">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NToolAction.GetScript">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.INAutoUpdateCallback.OnAutoUpdate(Nevron.ThinWeb.NAspNetThinWebControl)">
            <summary>
            Called when the control requests an auto update
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.ThinWeb.INAutoUpdateCallback.OnAutoUpdateStateChanged(Nevron.ThinWeb.NAspNetThinWebControl)">
            <summary>
            Called when the control auto update state has changed (stopped or started)
            </summary>
            <param name="control"></param>
        </member>
        <member name="T:Nevron.ThinWeb.INCustomRequestCallback">
            <summary>
            Represents a callback that is invoked when the client browser processes a custom callback
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.INCustomRequestCallback.OnCustomRequestCallback(Nevron.ThinWeb.NAspNetThinWebControl,Nevron.ThinWeb.NRequestContext,System.String)">
            <summary>
            Called when the client browser processes a custom request
            </summary>
            <param name="control"></param>
            <param name="context"></param>
            <param name="argument"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NClientCommand">
            <summary>
            Repsents a client command
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NClientCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NClientCommand.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NClientCommand.#ctor(System.String,System.Object[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NClientCommandList">
            <summary>
            Repsents a client command
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NClientCommandList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NClientCommandList.Pack">
            <summary>
            Packs the command list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l111111lll">
            <summary>
            Packs a client command list
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111lll.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111lll.AppendCommand(Nevron.ThinWeb.NClientCommand)">
            <summary>
            
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l11111lIll">
            <summary>
            Css helpers
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIll.GetDivSelector(System.String)">
            <summary>
            Gets a div selector by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIll.GetChildSelector(System.String,System.String)">
            <summary>
            Gets a child selector based on parent > child
            </summary>
            <param name="parentSelector"></param>
            <param name="childSelector"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l11111111l">
            <summary>
            Script helpers
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetSelectorVariable(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="variableName"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetNewRectScript(Nevron.GraphicsCore.NRectangle)">
            <summary>
            Gets a new rect script from recgt
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetNewRectFScript(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Gets a new rect script from recgt
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetNewSizeScript(Nevron.GraphicsCore.NSize)">
            <summary>
            Gets a new size script from size
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetDocumentReadyBegin">
            <summary>
            Gets a document ready begin function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetDocumentReadyEnd">
            <summary>
            Closes a document ready function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetAssignTiledImageCellCommand(Nevron.ThinWeb.NClientCommandList,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="clientId"></param>
            <param name="imageMap"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.FormatBool(System.Boolean)">
            <summary>
            Gets the JScript representation of a boolean value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.EncodeImageAsBase64Png(System.Drawing.Image)">
            <summary>
            Encodes an image as base64 png
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.EncodeStreamAsBase64Png(System.IO.Stream)">
            <summary>
            Ensocdes a stream as base64 png
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetImageFromResource(System.Type,System.String)">
            <summary>
            Gets an image from a type and resource path
            </summary>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111l.GetStreamFromResouce(System.Type,System.String)">
            <summary>
            Gets a stream from a type and resource path
            </summary>
            <param name="type"></param>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l11111ll1I">
            <summary>
            Base value formatter
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1I.FormatBoolValue(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1I.FormatIntValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1I.FormatFloatValue(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1I.FormatDoubleValue(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l11111llIl">
            <summary>
            Formats string values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111llI1">
            <summary>
            Formats string values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111llII">
            <summary>
            Formats bool values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l1ll">
            <summary>
            Formats integer values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l1l1">
            <summary>
            Formats floating point values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l1lI">
            <summary>
            Formats double values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l11l">
            <summary>
            Formats NRectange values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l111">
            <summary>
            Formats NRectangeF values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l11I">
            <summary>
            Formats NSize values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l1Il">
            <summary>
            Formats NPoint values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111IIll">
            <summary>
            Represents a java script variable (formatted verbatim)
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l1I1">
            <summary>
            Formats NJVar values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111l1II">
            <summary>
            Formats NJVar values
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l1111lI1lI">
            <summary>
            Implements script writing functionality
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.Reset">
            <summary>
            Resets the writer
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.Flush">
            <summary>
            Flushes the content of the writer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.BeginFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.BeginFunction(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.EndFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.EndFunctionStatement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <param name="param1"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendCall(System.String,System.Object[])">
            <summary>
            Appends a function call to the script
            </summary>
            <param name="functionName"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendFormatted(System.String,System.Object[],System.String)">
            <summary>
            Appends a formatted statement to the script
            </summary>
            <param name="prefix"></param>
            <param name="parameters"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendParam(System.Object)">
            <summary>
            
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendVerbatim(System.String)">
            <summary>
            Appends verbatim string to the writer
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendStatement(System.String)">
            <summary>
            Appends a statement 
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.AppendHostVar(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.BeginDocumentReady">
            <summary>
            Gets a document ready begin function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1lI.EndDocumentReady">
            <summary>
            Ends the document ready begin function
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l1III">
            <summary>
            Represents a resource script source
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1III.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1III.Register(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.UI.ClientScriptManager,System.Type)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="scriptManager"></param>
            <param name="csType"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1III.Render(Nevron.ThinWeb.NAspNetThinWebControl,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="html"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1III.l111II11ll(Nevron.ThinWeb.NAspNetThinWebControl)">
            <summary>
            Gets a url that request the specified resource
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l111111I1I">
            <summary>
            Represents a script source
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111I1I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111I1I.Register(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.UI.ClientScriptManager,System.Type)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="scriptManager"></param>
            <param name="csType"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111I1I.Render(Nevron.ThinWeb.NAspNetThinWebControl,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="html"></param>
        </member>
        <member name="F:Nevron.ThinWeb.l111111I1I.m_Source">
            <summary>
            The script source (url or resource path)
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.l111111I1I.m_Type">
            <summary>
            The script type CSS or java script
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111lll1">
            <summary>
            Represents a resource script source
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lll1.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="assemblyName"></param>
            <param name="resourcePath"></param>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lll1.Register(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.UI.ClientScriptManager,System.Type)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="scriptManager"></param>
            <param name="csType"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lll1.Render(Nevron.ThinWeb.NAspNetThinWebControl,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="html"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lll1.l111II11ll(Nevron.ThinWeb.NAspNetThinWebControl)">
            <summary>
            Gets a url that request the specified resource
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lll1.lIIlllllI11">
            <summary>
            Gets the resource specified by source
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l1111lI1l1">
            <summary>
            Represents a script source
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1l1.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="source"></param>
            <param name="sourceType"></param>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1l1.Register(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.UI.ClientScriptManager,System.Type)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="scriptManager"></param>
            <param name="csType"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1l1.Render(Nevron.ThinWeb.NAspNetThinWebControl,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="html"></param>
        </member>
        <member name="F:Nevron.ThinWeb.l1111lI1l1.m_Source">
            <summary>
            The script source (url or resource path)
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.l1111lI1l1.m_Type">
            <summary>
            The script type CSS or java script
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NIncompatibleTypeException">
            <summary>
            Throws an incompatible type exception
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NNode">
            <summary>
            Base node implementation
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNode.ParentNode">
            <summary>
            Obtains the parent node
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNode.RootNode">
            <summary>
            Obtains the root of this node
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NNode.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NNodeCollection">
            <summary>
            Summary description for NNodeCollection.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNodeCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNodeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNodeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NNodeCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNodeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the collectino.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NNodeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NNodeComposite">
            <summary>
            Summary description for NNodeComposite.
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.JQuerySourceType">
            <summary>
            Specifies the JQuery script source
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.JQuerySourceType.None">
            <summary>
            JQuery will not be embedded in the client script generated by the control. If you select this mode the page using the control must 
            refernce JQuery
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.JQuerySourceType.Embedded">
            <summary>
            The control will use the embedded version of JQuery
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.JQuerySourceType.Url">
            <summary>
            The control will generate a script tag that refrences the specified url. This URL must contain the JQuery library.
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.ImageServeMode">
            <summary>
            Enumerates the http handler modes
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.ImageServeMode.Request">
            <summary>
            Serve the images in a separate request
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.ImageServeMode.Embed">
            <summary>
            Always embed images in the response
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.ImageServeMode.Auto">
            <summary>
            Automatically choose whether to embed images based on the client browser
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.MouseEvent">
            <summary>
            Enumerates the tracked mouse events
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseDown">
            <summary>
            Mouse down
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseMove">
            <summary>
            Mouse move
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseUp">
            <summary>
            Mouse up
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseLeave">
            <summary>
            Mouse leave
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseHover">
            <summary>
            Mouse hover
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseEnter">
            <summary>
            Mouse enter
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseClick">
            <summary>
            Mouse click
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.MouseEvent.MouseDoubleClick">
            <summary>
            Mouse double click
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.MouseButton">
            <summary>
            Enumerates the mouse buttons
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NAspNetThinWebControlHttpHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControlHttpHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the IHttpHandler instance.
            </summary>
            <remarks>
            Returns true.
            </remarks>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControlHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NAspNetThinWebControl">
            <summary>
            Base ASP.NET thin control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.#ctor">
            <summary>
            Default construcotr
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.Initialized">
            <summary>
            Returns true if the control is initialized
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.CustomData">
            <summary>
            Gets or sets an object that is persisted with the control across roundtrips
            </summary>
            <remarks>
            The object must be an object that can be binary serialized by the .NET framework. 
            </remarks>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.AutoUpdateCallback">
            <summary>
            Gets or sets the auto update callback
            </summary>
            <remarks>
            The object that implements the INAutoUpdateCallback interface must be .NET binary serializable
            </remarks>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.CustomRequestCallback">
            <summary>
            Gets or sets the auto update callback
            </summary>
            <remarks>
            The object that implements the INCustomRequestCallback interface must be .NET binary serializable
            </remarks>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.Toolbar">
            <summary>
            Gets or sets the control toolbar 
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.PostbackID">
            <summary>
            Gets the client side id of this control.
            </summary>
            <remarks>
            The getter simply replaces colons with the $ sign.
            </remarks>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.StateId">
            <summary>
            Gets or sets the state id
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.ServiceUrl">
            <summary>
            Gets or sets the service URL
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.PageUrl">
            <summary>
            Gets the page URL
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I11lI1">
            <summary>
            Gets the dimensions of client host div
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I11lII">
            <summary>
            Gets the dimensions of the control view on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.ViewBounds">
            <summary>
            Gets the dimensions of the control view on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.lIIlllllIll">
            <summary>
            Gets / sets the tile image data
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I111ll">
            <summary>
            Gets the common control settings
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I111l1">
            <summary>
            Safely gets whether the current request is postback
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.ClearResponse">
            <summary>
            Ensures that the control does not produce a response
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.Update">
            <summary>
            Update the content of the control in the client browser
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.UpdateToolbar">
            <summary>
            Update the content of the control in the client browser
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.UpdateView">
            <summary>
            Update the content of the control in the client browser
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111I1IIIl(Nevron.ThinWeb.l11111Il11,System.Boolean)">
            <summary>
            Configures the response list to update the specified client content
            </summary>
            <param name="clientContent"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111I1III1(Nevron.ThinWeb.NClientCommand)">
            <summary>
            Adds a custom pre command to the command stream
            </summary>
            <param name="clientCommand"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111I1IIII(Nevron.ThinWeb.NClientCommand)">
            <summary>
            Adds a custom post command to the command stream
            </summary>
            <param name="clientCommand"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetImage(Nevron.GraphicsCore.INImageFormat,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            Gets an image in the specified format, size and resolution
            </summary>
            <param name="format"></param>
            <param name="size"></param>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetImage(Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Gets an image in the specified format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.AddCustomClientCommand(System.String)">
            <summary>
            Adds a custom client command to the generated commands to the client
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.LoadStateFromSession(System.String,System.Boolean)">
            <summary>
            Loads the specified state from the current session
            </summary>
            <param name="stateId"></param>
            <param name="initialized"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.SaveStateToSession">
            <summary>
            Saves the state of the control to the current session state
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetImageMap">
            <summary>
            Gets an image map
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.OnInit(System.Object,System.EventArgs)">
            <summary>
            Initializes the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="scriptIncludeFiles"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIllll">
            <summary>
            Gets the first ancestor of type update panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlll1">
            <summary>
            Gets the first ancestor of type update panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlllI">
            <summary>
            Gets the initial content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIll1l(System.String)">
            <summary>
            Gets the startup script
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIll11(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Returns the global update script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIllIl">
            <summary>
            
            </summary>
            <param name="scriptSources"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetIncludeScript">
            <summary>
            Gets the include script of the control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIllI1">
            <summary>
            Creates the control content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIllII(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Appends view update commands to the list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl1ll(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.LoadState(System.Byte[])">
            <summary>
            Loads the control state
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.SaveState">
            <summary>
            Saves the control state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl1l1(Nevron.Serialization.PersistencyFormat)">
            <summary>
            Saves the document state in the specified peristency format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl1lI(Nevron.Serialization.PersistencyFormat,System.Byte[])">
            <summary>
            Loads the document state from the specified peristency format
            </summary>
            <param name="format"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl11l(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl111(System.String)" -->
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl11I(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="newObj"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.RaisePostBackEvent(System.String)">
            <summary>
            Region raises the postback event
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I111lI">
            <summary>
            Gets the request map
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl1Il(System.String,System.String)">
            <summary>
            Gets a url that returns an image from the specified resource path
            </summary>
            <param name="assemblyName"></param>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl1I1(System.String,System.String)">
            <summary>
            Gets a url that returns a grayscaled image from the specified resource path
            </summary>
            <param name="assemblyName"></param>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetController">
            <summary>
            Gets an untyped controller
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I1111l">
            <summary>
            Gets the control script writer
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetHttpHandlerType">
            <summary>
            Gets the http handler type for service requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetHttpHandlerName(System.Type)">
            <summary>
            Gets the http handler name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.RegisterWebConfigHandler(Nevron.ThinWeb.NAspNetThinWebControlDesigner)">
            <summary>
            Registes the control web config handler
            </summary>
            <param name="designer"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControl.l111I11111">
            <summary>
            Gets the desing time text emitted by the control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.GetDesignTimeHtml(Nevron.ThinWeb.NAspNetThinWebControlDesigner)">
            <summary>
            
            </summary>
            <param name="designer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIl1II(Nevron.GraphicsCore.INImage,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Gets an image source from the specified image and image format
            </summary>
            <param name="image"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.ConfigureInitialResponse">
            <summary>
            Configures the image response of the control
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlIll">
            <summary>
            Gets the html map context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlIl1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlIlI(System.String,System.Byte[],System.Int32)">
            <summary>
            Returns a url that can be used as a tile image source
            </summary>
            <param name="mimeType"></param>
            <param name="bytes"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlI1l(Nevron.ThinWeb.l11111lllI)">
            <summary>
            
            </summary>
            <param name="requestList"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlI11">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControl.l111IIlI1I">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.ThinWeb.NAspNetThinWebControl.l1111IlIII">
            <summary>
            Cached host custom data script
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NAspNetThinWebControl.l1111I1lll">
            <summary>
            The serice url
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NAspNetThinWebControlDesigner">
            <summary>
            Provides design time support for all web controls, which derive from NAspNetThinWebControl class.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControlDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControlDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="ce"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NAspNetThinWebControlDesigner.GetDesignTimeHtml">
            <summary>
            Delegates the rendering to the OnWebControlDesignTimeRender method of the active 
            <see cref="!:Nevron.UI.WebForm.Controls.NClientServerTechnology"/> instance,
            stored in the ClientServerTechnology property of the web control that is being designed.
            </summary>
            <returns>The design-time HTML of the rendered web control.</returns>
        </member>
        <member name="P:Nevron.ThinWeb.NAspNetThinWebControlDesigner.WebControl">
            <summary>
            Gets the NWebControl object that is being designed.
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l11111lIlI">
            <summary>
            Dummy aspnet control implementation (used for common http handler requests)
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIlI.l111IIl1l1(Nevron.Serialization.PersistencyFormat)">
            <summary>
            Saves the document state in the specified peristency format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIlI.l111IIl1lI(Nevron.Serialization.PersistencyFormat,System.Byte[])">
            <summary>
            Loads the document state from the specified peristency format
            </summary>
            <param name="format"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111lIl.IsHttpHandlerRegistered(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.Configuration.HttpHandlerAction)">
            <summary>
            Tests if an HTTP handler is registered in the web.config file 
            under the configuration section system.web/httpHandlers.
            </summary>
            <param name="Action">The HTTP handler to test upon.</param>
            <returns>True if the HTTP handler is registered, otherwise false.</returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111lIl.l111II1II1(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.Configuration.HttpHandlerAction)">
            <summary>
            Registers an HTTP handler is the web.config file under the configuration section system.web/httpHandlers.
            </summary>
            <param name="Action">The HTTP handler to register.</param>
            <returns>
            True if the HTTP handler was registered successfully, 
            false if the method fails to obtain an IWebApplication object from the site of the page
            or fails to obtain a Configuration object from the web application.
            </returns>
            <remarks>
            Does not check if the handler has been already registered. Please use the IsHttpHandlerRegistered
            method of the NClientServerTechnology class to determine if the HTTP handler exists in the web.config file.
            </remarks>
        </member>
        <member name="M:Nevron.ThinWeb.l111111lIl.IsHttpHandlerRegisteredIIS7(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.Configuration.HttpHandlerAction)">
            <summary>
            Tests if an HTTP handler is registered in the web.config file 
            under the configuration section system.webServer/handlers.
            </summary>
            <param name="Action">The HTTP handler to test upon.</param>
            <returns>True if the HTTP handler is registered, otherwise false.</returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111lIl.l111II1III(Nevron.ThinWeb.NAspNetThinWebControl,System.Web.Configuration.HttpHandlerAction)">
            <summary>
            Registers an HTTP handler is the web.config file under the configuration 
            section system.webServer/handlers.
            </summary>
            <param name="action">The HTTP handler to register.</param>
            <returns>
            True if the HTTP handler was registered successfully, 
            false if the method fails to obtain an IWebApplication object from the site of the page
            or fails to obtain a Configuration object from the web application.
            </returns>
            <remarks>
            Does not check if the handler has been already registered. Please use the IsHttpHandlerRegisteredIIS7
            method of the NClientServerTechnology class to determine if the HTTP handler exists in the web.config file.
            </remarks>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l1II1">
            <summary>
            Represents a script source
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1II1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NPostbackEventArgs">
            <summary>
            Represents postback event args
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NPostbackEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NPostbackEventArgs.#ctor(Nevron.GraphicsCore.NPoint,Nevron.GraphicsCore.NPoint)">
            <summary>
            Default constructor
            </summary>
            <param name="mousePosition"></param>
            <param name="relativeMousePosition"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NPostbackEventArgs.MousePosition">
            <summary>
            Gets the mouse coordinates relative to the object
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NPostbackEventArgs.PageMousePosition">
            <summary>
            Gets the mouse page coordinates of the postback event
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NPostbackEventArgs.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="postbackEventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NServerSettings">
            <summary>
            Provides various settings related to the ThinWeb control processing
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NServerSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.TileCacheSize">
            <summary>
            Gets / sets the tiled cache size (in pixels)
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.ImageServeMode">
            <summary>
            Gets / set how to serve the generated image(s) of the control
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.EnableAutoUpdate">
            <summary>
            Whether auto update is enabled
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.AutoUpdateInterval">
            <summary>
            The auto update interval in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.DisplayErrorMessages">
            <summary>
            Whether to display error message on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.JQuery">
            <summary>
            Controsl JQuery related settings
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.Css">
            <summary>
            Gets or sets the CSS used by the control
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerSettings.l111I11IIl">
            <summary>
            Gets the tile image generation (used in http image handler tiles
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NServerSettings.l111IIIl1I(System.Int32)">
            <summary>
            Gets a value indicating whether image transfer should be achieved trough http handlers.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NServerSettings.l111IIIlIl">
            <summary>
            Gets the next tile image generation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NServerSettings.l111IIIlI1(Nevron.GraphicsCore.NSize)">
            <summary>
            Gets the effective cache size
            </summary>
            <param name="maxChunkSize"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlIIlI">
            <summary>
            Whether auto update is enabled.
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlII1l">
            <summary>
            The auto update interval.
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlII11">
            <summary>
            Gets the tile image generation.
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlII1I">
            <summary>
            Cache size (in pixels).
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlIIIl">
            <summary>
            The http image handlers mode.
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlIII1">
            <summary>
            Whether to display error messages.
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111IlIIII">
            <summary>
            Controls the used JQuery version.
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NServerSettings.l111I1llll">
            <summary>
            Controls the CSS used by the control.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1l.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1l.#ctor(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1l.#ctor(System.String,System.String,Nevron.GraphicsCore.INImage)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="mimeType"></param>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1l.#ctor(System.String,System.Drawing.Bitmap)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="bitmap"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111ll1l.#ctor(System.String,Nevron.GraphicsCore.INImage,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="image"></param>
            <param name="format"></param>        
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIIl1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIIl1.#ctor(System.Int64)">
            <summary>
            Initializer constructor
            </summary>
            <param name="generation"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIIl1.l111II1Il1(System.String)">
            <summary>
            Gets the image data for the specified id and removes from the list
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NThinWebControlLoadAssemblyType">
            <summary>
            Used to explicitly load/reference the Nevron.ThinWeb.dll assembly.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NThinWebControlLoadAssemblyType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1I.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l111111l1I.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11I1.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l11I1.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111111I.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l11111111I.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l11Il">
            <summary>
            The base of all params
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11Il.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l11Il.ValueString">
            <summary>
            Gets / sets the string representation of this param
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l111111IlI">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III1ll(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III1l1(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III1lI(System.String)">
            <summary>
            Gets / sets a value encoded as a hex string when request is packed or parsed
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III11l(System.String,System.String)">
            <summary>
            Gets / sets a value encoded as a hex string when request is packed or parsed
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III111(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III11I(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III1Il(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III11I(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III1I1">
            <summary>
            Registers a two dimensional range of parameters
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111III1II(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Reads a two dimensional range from parameters
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIIIll">
            <summary>
            Registers a rect in the list
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIIIl1">
            <summary>
            Gets the rect from the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIIIlI(Nevron.GraphicsCore.NRectangle)">
            <summary>
            Writes a rect to the list
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIII1l">
            <summary>
            Registers a size in the list
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIII11">
            <summary>
            Reads a size from the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.Append(System.Text.StringBuilder)">
            <summary>
            Packs the param list to its string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIII1I(System.String)">
            <summary>
            Unpacks the param list
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIIIIl(System.String)">
            <summary>
            Finds the param with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IlI.l111IIIII1(System.String)">
            <summary>
            Finds the index of the param with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l1111111ll.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111111ll.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIIll.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111lIIll.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIIll.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l111I">
            <summary>
            Executes the custom rquest callback
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l111I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l111I.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l111I.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l111I.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l111111Il1">
            <summary>
            Enforces browser request
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l111111Il1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111Il1.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111Il1.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l1111lIllI">
            <summary>
            Fires a server mouse event
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIllI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111lIllI.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIllI.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIllI.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1111.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l1111.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1111.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1I1I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l1I1I.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1I1I.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l111111III">
            <summary>
            Loads the control state from the session using the passed id
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111III.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111III.#ctor(System.String)">
            <summary>
            Initalizer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l111111III.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l111111III.Id">
            <summary>
            Gets the id
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111III.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111III.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l1lII">
            <summary>
            Base for all requests
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lII.#ctor">
            <summary>
            Initailizer constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lII.InitParamList(System.String)">
            <summary>
            Initializes the param list from its packed representation
            </summary>
            <param name="packedParam"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l1lII.Name">
            <summary>
            Gets the request name
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lII.l111I1II1I">
            <summary>
            Gets the request param list
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lII.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            Processes the request
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NRequestContext">
            <summary>
            Base for all requests
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lllI.ContainsLoadStateForId(System.String)">
            <summary>
            Returns true if the request list contains a load state for this id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lllI.Parse(Nevron.ThinWeb.NAspNetThinWebControl,System.String)">
            <summary>
            Parses the specified request list
            </summary>
            <param name="control"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lllI.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            Processes the request list
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lllI.Pack">
            <summary>
            Packs the request list to string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l111l">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l111l.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l111l.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l111l.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l111l.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l111111Ill">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111Ill.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l111111Ill.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111Ill.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111Ill.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l1111lIlIl">
            <summary>
            Streams the composed CSS to the client browser
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIlIl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111lIlIl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIlIl.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11lI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11lI.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l11lI.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11lI.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l111111II1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111II1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111II1.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mimeType"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l111111II1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111II1.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111II1.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIll1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIll1.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="assemblyName"></param>
            <param name="path"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111lIll1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lIll1.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l11l1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11l1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11l1.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="assemblyName"></param>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11l1.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l11.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l11.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="assemblyName"></param>
            <param name="path"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l111111l11.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l11.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l11111lIIl">
            <summary>
            Streams the stored tile image data to the client
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIIl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIIl.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l11111lIIl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIIl.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l11111lIIl.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l1111l11ll">
            <summary>
            Enforces browser request
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11ll.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l11ll.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l11ll.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lI1.#ctor">
            <summary>
            Initailzier constuctor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lI1.Create(System.String)">
            <summary>
            Creates a request from the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1lI1.RegisterRequest(System.String,System.Type)">
            <summary>
            Register the request in the map
            </summary>
            <param name="requestType"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111l1lI1.Instance">
            <summary>
            Gets the chart request map instance
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l111111IIl">
            <summary>
             Activate tool request
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IIl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IIl.#ctor(System.Type)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="toolType"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l111111IIl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111IIl.ToggleTool(Nevron.ThinWeb.NToolCollection)">
            <summary>
            
            </summary>
            <param name="tools"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l111111111">
            <summary>
             Activate tool request
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111111.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111111.#ctor(System.Type)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="toolType"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l111111111.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111111.ToggleTool(Nevron.ThinWeb.NToolCollection)">
            <summary>
            
            </summary>
            <param name="tools"></param>
        </member>
        <member name="T:Nevron.ThinWeb.l111111l1l">
            <summary>
             Activate tool request
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1l.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1l.#ctor(System.Type)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="toolType"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1l.l111I1II1I">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1l.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1l.ToggleTool(Nevron.ThinWeb.NToolCollection)">
            <summary>
            
            </summary>
            <param name="tools"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111l1l.GetToolType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NBinaryResponseOutput.#ctor(System.String,System.Byte[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="mimeType"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NBinaryResponseOutput.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mimeType"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NBinaryResponseOutput.#ctor(System.String,System.Byte[],System.Int32,System.Int32,System.String[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="mimeType"></param>
            <param name="data"></param>
            <param name="length"></param>
            <param name="expiration"></param>
            <param name="headers"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NTextResponseOutput.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mimeType"></param>
            <param name="text"></param>
        </member>
        <member name="F:Nevron.ThinWeb.NTextResponseOutput.m_MimePlainText">
            <summary>
            Plain text
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NTextResponseOutput.m_MimeCSS">
            <summary>
            CSS 
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NTextResponseOutput.m_MimeHTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NTextResponseOutput.m_MimeJavaScript">
            <summary>
            Java Script
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.l1111lI11l">
            <summary>
            Generates a response that executes a command list
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI11l.#ctor(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.l1111lI11l.l1111I11II">
            <summary>
            The client content to update
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111llI1I.Process(Nevron.ThinWeb.NRequestContext)">
            <summary>
            Processes the reponse list
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111llI1I.EnsureHasResponseOfType(System.Type)">
            <summary>
            Ensures that the response list has the specified type of response
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111llI1I.EnsureHasNoResponseOfType(System.Type)">
            <summary>
            Ensures that the response list has the specified type of response
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111llI1I.GetResponseOfType(System.Type,System.Boolean)">
            <summary>
            Gets the response of the specified type
            </summary>
            <param name="type"></param>
            <param name="createIfNotPresent">if true the response will be created if not present</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l1111l1l1I.#ctor(System.String,System.String)">
            <summary>
            Initialzier constructor
            </summary>
            <param name="imagePath"></param>
            <param name="mimeType"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111llI11.#ctor">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111llI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111llI.#ctor(Nevron.ThinWeb.l11111Il11)">
            <summary>
            Initializer constructor
            </summary>
            <param name="clientContent"></param>
        </member>
        <member name="F:Nevron.ThinWeb.l111111llI.l111Il1III">
            <summary>
            The client content to update
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NCssSettings">
            <summary>
            Controls the CSS used by the control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NCssSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ScrollbarButtonInflate">
            <summary>
            Gets sets the scrollbar button inflate
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ScrollbarInflate">
            <summary>
            Gets / sets the scrollbar inflate
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ViewInflate">
            <summary>
            Gets / sets the view inflate caused by CSS applied on the view
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ToolbarInflate">
            <summary>
            Gets / sets the toolbar inflate
            </summary>
            <remarks>
            The value of this property is used when the control toolbar is measured. By default it is set to height inflate of 2 pixels - this reflects the CSS
            applied on the toolbar which has no padding and border and bottom margin of 2 pixels.
            </remarks>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.View">
            <summary>
            Gets / sets the css used for the control view on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.NoSelect">
            <summary>
            Gets / sets the css used to mark images and div as non selectable
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.Tooltip">
            <summary>
            Gets / sets the css used to for tooltips
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ZoomInSelection">
            <summary>
            Gets / sets the css used to for zoom in selection
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ZoomOutSelection">
            <summary>
            Gets / sets the css used to for zoom out selection
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.Scrollbar">
            <summary>
            Gets / sets teh css applied on the scrollbar
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.Toolbar">
            <summary>
            Gets / sets the css applied on the toolbar
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ToolbarButton">
            <summary>
            Gets / sets the css applied on toolbar buttons
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.ToolbarSeparator">
            <summary>
            Gets / sets the css applied on toolbar separators
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.StatePressed">
            <summary>
            Gets / sets the button pressed css
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.StateDisabled">
            <summary>
            Gets / sets the button disabled css
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.StateHover">
            <summary>
            Gets / sets the css applied on hovered buttons
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NCssSettings.StateDefault">
            <summary>
            Gets / sets the css applied by default on buttons
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NCssSettings.GetSource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NCssSettings.l111I1Ill1">
            <summary>
            Composes the effective css rules used by the control from the specified and default css styles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NCssSettings.l111I1IllI(System.String)">
            <summary>
            Get the css value for the specified css
            </summary>
            <param name="cssName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NCssSettings.l111I1Il1l(System.String,System.String)">
            <summary>
            Set the css value
            </summary>
            <param name="cssName"></param>
            <param name="cssValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NCssSettings.l111I1Il11(System.String)">
            <summary>
            
            </summary>
            <param name="cssName"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.ThinWeb.NCssSettings.l11111IIl1">
            <summary>
            The scrollbar height
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NCssSettings.l11111IIlI">
            <summary>
            The scrollbar height
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NCssSettings.l11111II1l">
            <summary>
            The view inflate
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NCssSettings.l11111II11">
            <summary>
            Toolbar inflate
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NCssSettings.l11111II1I">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NJQuerySettings">
            <summary>
            Controls the version and location of JQuery used by the ThinWeb control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NJQuerySettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NJQuerySettings.SourceType">
            <summary>
            Specifies how JQuery will be embedded in the client script
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NJQuerySettings.Url">
            <summary>
            Gets / sets the url holding the JQuery souce code in case the SourceType is set to Url
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NJQuerySettings.ExecuteAllScriptsInDocumentReady">
            <summary>
            Gets or sets whether to execute all scripts in document ready
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.GetObject(System.String,Nevron.ThinWeb.NAspNetThinWebControl)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.SetObject(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.ToByteArray">
            <summary>
            Saves a state object to a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.FromByteArray(System.Byte[])">
            <summary>
            Loads a state object from a byte array
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.l111II1I1I(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l111111ll1.l111II1IIl(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.l1111lI1II">
            <summary>
            Represents a name / object pair used for serialization purposes
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1II.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1II.#ctor(System.String,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1II.#ctor(System.String,System.Byte[])">
            <summary>
            Deserialization constructor
            </summary>
            <param name="name"></param>
            <param name="bytes"></param>
        </member>
        <member name="P:Nevron.ThinWeb.l1111lI1II.Length">
            <summary>
            Gets the length of the pair in bytes
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1II.Deserialize">
            <summary>
            Deserializes the constained object
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1II.Serialize">
            <summary>
            Serializes the contained object to byte array
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.l1111lI1II.GetObject(Nevron.ThinWeb.NAspNetThinWebControl)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NControlToolbar.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NControlToolbar.Visible">
            <summary>
            Gets or sets the visible property
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NControlToolbar.Items">
            <summary>
            Gets or sets the toolbar items collection
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NControlToolbar.l111I11Il1">
            <summary>
            Returns true if the toolbar is effectively visible
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NControlToolbar.l111IIll11(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Craetes the html contnet representing the toolbar
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.ThinWeb.NControlToolbar.PreferredHeight">
            <summary>
            Gets the preferred height of the toolbar
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NToolbarActionItem">
            <summary>
            The base of all toolbar items
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarActionItem.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarActionItem.#ctor(Nevron.ThinWeb.NAction)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NToolbarActionItem.ClientName">
            <summary>
            Gets the client name of this item
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NToolbarActionItem.Action">
            <summary>
            Gets / sets the action associated with this item
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NToolbarActionItem.m_Action">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarButton.#ctor(Nevron.ThinWeb.NAction)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarButton.AppendCommands(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NToolbarItem">
            <summary>
            The base of all toolbar items
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarItem.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NToolbarItem.Size">
            <summary>
            Gets / sets the size of the item
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarItem.AppendCommands(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Appends client commands
            </summary>
            <param name="control"></param>
            <param name="script"></param>
        </member>
        <member name="T:Nevron.ThinWeb.NToolbarItemCollection">
            <summary>
            This collection holds toolbar items
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NToolbarSeparator">
            <summary>
            Represents a toolbar separator
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolbarSeparator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NBrowserMouseEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NBrowserMouseEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NBrowserMouseEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mouseButton"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NBrowserMouseEventArgs.X">
            <summary>
            Gets the X mouse coordinate
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NBrowserMouseEventArgs.Y">
            <summary>
            Gets the Y mouse coordinate
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NBrowserMouseEventArgs.MouseButton">
            <summary>
            Get the mouse button
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NBrowserRedirectTool">
            <summary>
            Represents a tool that redirects the client browser when the user clicks on element with interactivity style having a URL attribute
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NBrowserRedirectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NBrowserRedirectTool.OpenLinkInNewWindow">
            <summary>
            Gets or sets a value indicating whether to open the link in a new window
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NClientMouseEventTool">
            <summary>
            Represents a tool that when present in the controller tools collection processes client image map script associated with control elements
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NClientMouseEventTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NController">
            <summary>
            The controller object serves as a holder of the tools in the control
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NController.Tools">
            <summary>
            Gets or sets the tools attached to this control
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NController.l111I11I1l">
            <summary>
            Gets a value indicating whether the controller requires image map
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NController.l111IIll11(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Appends controller update command list
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NController.AppendCommands(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Gets the client configuration script for the controller
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NController.l111II1l1I">
            <summary>
            Called when the control is processing a page entry
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NController.l111Il111I">
            <summary>
            The tools collection of the controller
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NCursorTool">
            <summary>
            Represents a tool that dynamically changes the browser cursor depending on the cursor interactivity attribute
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NCursorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NPostbackTool">
            <summary>
            Represents a tool that when present in the controller tools collection processes client image map script
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NPostbackTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NPostbackTool.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NPostbackTool.PostbackOnlyOnInteractiveItems">
            <summary>
            Gets or sets a value indicating whether postback should occur only on interactive items
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NPostbackTool.l111II1l1I">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NServerMouseEventTool">
            <summary>
            Represents a tool that when present in the controller tools collection fires server side mouse events
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NServerMouseEventTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NServerMouseEventTool.#ctor(Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback,Nevron.ThinWeb.INMouseEventCallback)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mouseDown"></param>
            <param name="mouseMove"></param>
            <param name="mouseUp"></param>
            <param name="mouseEnter"></param>
            <param name="mouseLeave"></param>
            <param name="mouseOver"></param>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseDown">
            <summary>
            Whether to track the mouse down event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseMove">
            <summary>
            Whether to track the mouse move event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseUp">
            <summary>
            Whether to track the mouse up event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseLeave">
            <summary>
            Whether to track the mouse leave event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseOver">
            <summary>
            Whether to track the mouse over event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseEnter">
            <summary>
            Whether to track the mouse enter event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseClick">
            <summary>
            Whether to track mouse click event on the client
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NServerMouseEventTool.MouseDoubleClick">
            <summary>
            Whether to track mouse double click event on the client
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NServerMouseEventTool.l111II1I1l(Nevron.ThinWeb.MouseEvent,Nevron.ThinWeb.NBrowserMouseEventArgs)">
            <summary>
            Fires the server side mouse event
            </summary>
            <param name="mouseEvent"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NTool.#ctor">
            <summary>
            Contructors
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTool.Enabled">
            <summary>
            Gets or sets a value indicating whether the tool is enabled
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTool.Exclusive">
            <summary>
            Whether the tool is exclusive (e.g. should not be combined with other tools)
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NTool.l111I11I1l">
            <summary>
            Whether the tool requires an image map
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.ThinWeb.NTool.l111II1l1I">
            <summary>
            Called when the control is processing a page entry
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NTool.AppendCommands(Nevron.ThinWeb.NClientCommandList)">
            <summary>
            Appends commands for the client 
            </summary>
            <param name="commandList"></param>
        </member>
        <member name="F:Nevron.ThinWeb.NTool.lIIl1Il">
            <summary>
            Whether the tool is active
            </summary>
        </member>
        <member name="F:Nevron.ThinWeb.NTool.l1111I1llI">
            <summary>
            Whether the tool is exclusive
            </summary>
        </member>
        <member name="T:Nevron.ThinWeb.NToolCollection">
            <summary>
            This collection holds the tools, which can applied to the control.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolCollection.#ctor">
            <summary>
            Creates a new empty interactivity operations collection.
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolCollection.FindToolOfType(System.Type)">
            <summary>
            Finds a tool of the specified type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.ThinWeb.NToolCollection.l111II11l1">
            <summary>
            Deactivates all exclusive tools
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NToolCollection.l111II11lI(System.Type)">
            <summary>
            Ensures that the collection contains a tool of the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.ThinWeb.NTooltipTool">
            <summary>
            Represents a tool that shows client side tooltips depending on the tooltip interactivity attribute
            </summary>
        </member>
        <member name="M:Nevron.ThinWeb.NTooltipTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTooltipTool.PopDelay">
            <summary>
            Gets or sets the tooltip pop delay in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTooltipTool.InitialDelay">
            <summary>
            Gets or sets the tooltip initial delay in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTooltipTool.FadeInDelay">
            <summary>
            Gets or sets the tooltip fade in delay in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTooltipTool.FadeOutDelay">
            <summary>
            Gets or sets the tooltip fade out delay in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTooltipTool.ReshowDelay">
            <summary>
            Gets or sets the tooltip reshow delay in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.ThinWeb.NTooltipTool.FollowMouse">
            <summary>
            Whether the tooltip must follow the mouse position
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111Il1I.l111I1ll1l">
            <summary>
            Represents a panel in which controls are stacked vertically, at preffered size
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111Il1I.l111I1ll11">
            <summary>
            Represents a panel in which controls are stacked horizontally, at preffered size
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111Il1I.HSplit">
            <summary>
            Represents a panel in which controls are stacked horizontally, with the same percent size
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.StackMode">
            <summary>
            Enumerates the possible Stack modes
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111IlIl">
            <summary>
            Enumerates the possible binding types of a property editor
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlIl.l111I1llI1">
            <summary>
            Editor for an RS Object property
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlIl.l111I1llII">
            <summary>
            Editor for a Data Cell property
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlIl.l111I1l1ll">
            <summary>
            Editor for a Data Grouping Part (grouping, filter, sorting) property
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlIl.l111I1l1l1">
            <summary>
            Editor for a data source property
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlIl.l111I1l1lI">
            <summary>
            Editor for an attribute property
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.MessageType">
            <summary>
            
            
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111IlI1">
            <summary>
            Enumerates the auto id modes of a HTML element
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlI1.Never">
            <summary>
            An auto id is never generated
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlI1.Always">
            <summary>
            An auto id is always generated
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111IlI1.l111I1l11l">
            <summary>
            An auto id is generated only when the the Id property getter is called
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I1l1.Color">
            <summary>
            Solid color fill style.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I1l1.Gradient">
            <summary>
            A fill style based on two colors.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I1l1.Hatch">
            <summary>
            A fill style based on an pattern with foreground and background colors.
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111I11l">
            <summary>
            Specifies the recognized attribute property types
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.Load">
            <summary>
            Load 
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.l111I1l111">
            <summary>
            Load Predefined
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.Compile">
            <summary>
            Compile
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.MoveUp">
            <summary>
            Move up
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l11111I111.MoveDown">
            <summary>
            Move down
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111111lI">
            <summary>
            The FORM element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111111lI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.NInputElement">
            <summary>
            The INPUT element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NInputElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111IllI">
            <summary>
            Represents the SELECT element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111IllI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111IllI.l111II1ll1">
            <summary>
            Gets the JScript that gets the client side value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111IllI.l11IllllII(System.String,System.String)">
            <summary>
            Adds a combo box option
            </summary>
            <param name="text"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111IllI.l11Illl1ll(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111IllI.FillFromEnum(System.Type)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111IllI.SelectedValue">
            <summary>
            Gets/sets the selected value
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111IllI.l11Illl1l1">
            <summary>
            Inits a combo box
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111lI1I">
            <summary>
            The TEXTAREA element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lI1I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lIIII">
            <summary>
            The LI element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIIII.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1l11">
            <summary>
            The OL element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1l11.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lIII1">
            <summary>
            The UL element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIII1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111111II">
            <summary>
            The A element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111111II.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111II.HRef">
            <summary>
            Gets/sets the HREF attribute
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111II.Target">
            <summary>
            Gets/sets the TARGET attribute
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1I11">
            <summary>
            The BODY element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1I11.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1Il1">
            <summary>
            The DIV element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1Il1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1Il1.DialogTitle">
            <summary>
            Gets/sets the dialog title
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1Il1.DialogWidth">
            <summary>
            Gets/sets the dialog width
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1Il1.DialogHeight">
            <summary>
            Gets/sets the dialog height
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1IIl">
            <summary>
            Empty node - used as placeholder
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl11.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl11.#ctor(System.String)">
            <summary>
            FieldSet with legend
            </summary>
            <param name="legend"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111Ill1">
            <summary>
            The HEAD element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111Ill1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1ll1">
            <summary>
            Represents a lightweight, stateless HTML element, which renders in a HTML text writer
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I11I(System.String)">
            <summary>
            Gets a child replaceable div by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I1Il(System.String)">
            <summary>
            Gets a descendant replaceable div by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I1I1(System.String)">
            <summary>
            Adds inner HTML to the element
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I1I1(System.String,System.Object[])">
            <summary>
            Adds inner HTML to the element
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.SetStyle(System.String,System.String)">
            <summary>
            Sets a style value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I1II(System.String)">
            <summary>
            Sets a style value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.GetStyle(System.String)">
            <summary>
            Gets a style value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1IIll(System.String,System.String)">
            <summary>
            Sets an attribute value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1IIl1(System.String)">
            <summary>
            Gets an attribute value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.SetClass(System.String[])">
            <summary>
            
            </summary>
            <param name="classes"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.lIIlllllIl1(System.String)">
            <summary>
            Adds a class to the element
            </summary>
            <param name="className"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1IIlI(System.String)">
            <summary>
            Removes a class from the element
            </summary>
            <param name="className"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.AddScript(System.String)">
            <summary>
            
            </summary>
            <param name="classes"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.AddScript(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.Render(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the element begin tag, contents and end tab
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1II1l">
            <summary>
            Renders the inner HTML of the element (without the begin and end tags)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1II11">
            <summary>
            Renders the outer HTML of the element (with the begin and end tags)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.l111I11llI">
            <summary>
            Specifies the mode in which an automatic Id must be generated, in case the user has not explicitly provided one.
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Tag">
            <summary>
            Gets/sets the element tag
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Id">
            <summary>
            Gets/sets the Id of the element
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Class">
            <summary>
            Gets the full class of the element
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Value">
            <summary>
            Gets/sets the element value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Title">
            <summary>
            Gets/sets the title attribute.
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Align">
            <summary>
            Gets/sets the align attribute
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnClick">
            <summary>
            The onclick event occurs when the pointing device button is clicked over an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnDoubleClick">
            <summary>
            The ondblclick event occurs when the pointing device button is double clicked over an element. 
            This attribute may be used with most elements
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnMouseDown">
            <summary>
            The onmousedown event occurs when the pointing device button is pressed over an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnMouseUp">
            <summary>
            The onmouseup event occurs when the pointing device button is released over an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.l111I11l1l">
            <summary>
            The onmouseover event occurs when the pointing device is moved onto an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnMouseMove">
            <summary>
            The onmousemove event occurs when the pointing device is moved while it is over an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.l111I11l11">
            <summary>
            The onmouseout event occurs when the pointing device is moved away from an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnFocus">
            <summary>
            The onfocus event occurs when an element receives focus either by the pointing device or by tabbing navigation. 
            This attribute may be used with the following elements: 
            A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.l111I11l1I">
            <summary>
            The onblur event occurs when an element loses focus either by the pointing device or by tabbing navigation. 
            It may be used with the same elements as onfocus. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnKeyPress">
            <summary>
            The onkeypress event occurs when a key is pressed and released over an element. 
            This attribute may be used with most elements.
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnKeyDown">
            <summary>
            The onkeydown event occurs when a key is pressed down over an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnKeyUp">
            <summary>
            The onkeyup event occurs when a key is released over an element. 
            This attribute may be used with most elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnSelect">
            <summary>
            The onselect event occurs when a user selects some text in a text fieldPath. 
            This attribute may be used with the INPUT and TEXTAREA elements. 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.OnChange">
            <summary>
            The onchange event occurs when a control loses the input focus and its value has been modified since gaining focus. 
            This attribute applies to the following elements: INPUT, SELECT, and TEXTAREA.
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Visible">
            <summary>
            Gets/sets whether the element is visible
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Width">
            <summary>
            Gets/sets the element width
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Height">
            <summary>
            Gets/sets the element height
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MinHeight">
            <summary>
            Gets/sets the element min-height
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MaxHeight">
            <summary>
            Gets/sets the element max-height
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MinWidth">
            <summary>
            Gets/sets the element min-width
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MaxWidth">
            <summary>
            Gets/sets the element max-width
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Nevron.SPVision.Design.l1111l1ll1.Overflow" -->
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.BackgroundColor">
            <summary>
            Gets/sets the background-color style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.BackgroundImage">
            <summary>
            Gets/sets the background-itemPreview style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Margin">
            <summary>
            Gets/sets the margin style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MarginLeft">
            <summary>
            Gets/sets the margin-left style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MarginRight">
            <summary>
            Gets/sets the margin-right style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MarginTop">
            <summary>
            Gets/sets the margin-top style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.MarginBottom">
            <summary>
            Gets/sets the margin-top style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Padding">
            <summary>
            Gets/sets the padding style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.Border">
            <summary>
            Gets/sets the border style value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1ll1.TextAlign">
            <summary>
            Gets/sets the text align style
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I1lI">
            <summary>
            Generates an automatic id for this element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.RenderBeginTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the web node begin
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I11l(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the element class
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.RenderAttributes(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders attributes of the element
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.l111I1I111(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the style of the element
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1ll1.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the web node end
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1lll">
            <summary>
            Represents an HTML node and serves as base class 
            for HTML elements and HTML text.
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.AddChild(Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Adds a child node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.GetChildrenCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.GetChildAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.RemoveAllChildren">
            <summary>
            Removes all child nodes
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.l111I1IlI1">
            <summary>
            Gets an enumerator for the HTML element children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.GetChildren">
            <summary>
            Gets a child replaceable div by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.l111I1IlII">
            <summary>
            Gets a descendant replaceable div by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.GetFirstAncestor(System.Type)">
            <summary>
            Gets the first ancestor node which is of the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.Render(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Must override to render the node
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.RenderContents(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the web node contents
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.RenderChildren(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Renders the child nodes
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.l111I1I1ll(Nevron.SPVision.Design.l1111lIlII,Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Renders a child node
            </summary>
            <param name="writer"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1lll.l111I1I1l1(Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Throws an exception if the specified node is not acceptable
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1lll.Parent">
            <summary>
            Gets the parent node
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111lI11">
            <summary>
            Represents a HTML node, which renders a text string
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lI11.#ctor(System.String)">
            <summary>
            Creates a literal html text node, with the specified html
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lI11.#ctor(System.String,System.Object[])">
            <summary>
            Creates a literal html text node, with formatted html
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lI11.Render(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Must override to render the node
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lI11.Text">
            <summary>
            Gets/sets the text
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1l1l">
            <summary>
            The IMG element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1l1l.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1l1l.#ctor(System.String)">
            <summary>
            Initialzier constructor
            </summary>
            <param name="sourceURL"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1l1l.l111I11lIl">
            <summary>
            Gets/sets the itemPreview source URL
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NLabelElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NLabelElement.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.NLabelElement.For">
            <summary>
            Gets/sets the label for attribute which specifies the id of another HTML element for which the label is created
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI1I1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lIIIl">
            <summary>
            A Message Div
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIIIl.#ctor(Nevron.SPVision.Design.MessageType,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIIIl.#ctor(Nevron.SPVision.Design.MessageType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="caption"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIIIl.Init(Nevron.SPVision.Design.MessageType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="caption"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l1llllllI">
            <summary>
            The P Element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1llllllI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1llllllI.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lI1ll">
            <summary>
            The IMG element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI1ll.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI1ll.#ctor(System.String)">
            <summary>
            Initialzier constructor
            </summary>
            <param name="sourceURL"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI1ll.#ctor(System.String,System.String)">
            <summary>
            Initialzier constructor
            </summary>
            <param name="sourceURL"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111lI1ll.Type">
            <summary>
            Gets/sets the script type attribute
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l111111I11">
            <summary>
            The Span Element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111I11.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111I11.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="html">html enclused in the span</param>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1llI">
            <summary>
            The TITLE element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1llI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lII1I">
            <summary>
            Represents the table col group element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lII1I.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1I1l">
            <summary>
            The COL element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1I1l.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1I1l.Span">
            <summary>
            Gets/sets the col span
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1I1l.l111I111II">
            <summary>
            Gets/sets the horizontal alignment in cells 
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1I1l.l111I11Ill">
            <summary>
            Gets/sets the vertical alignment in cells 
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lI11I">
            <summary>
            The TD element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI11I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI11I.#ctor(Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI11I.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="html"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111lI11I.ColSpan">
            <summary>
            Gets/sets the col span
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111lI11I.RowSpan">
            <summary>
            Gets/sets the row span
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111lIII">
            <summary>
            The TABLE element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lIII.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lIII.Cols">
            <summary>
            Gets the collection of columns
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lIII.Head">
            <summary>
            Gets the collection of head rows
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lIII.Body">
            <summary>
            Gets the collection of body rows
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lIII.Foot">
            <summary>
            Gets the collection of head rows
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lIII.CellSpacing">
            <summary>
            Gets/sets the cell spacing attribute
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lIII.CellPadding">
            <summary>
            Gets/sets the cell padding attribute
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lIII.RenderChildren(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to render the children in the table specific order
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lII11">
            <summary>
            Represents a collection of table rows
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lII11.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tag"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111ll11">
            <summary>
            The TR element
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111ll11.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111ll11.ColSpan">
            <summary>
            Gets/sets the col span
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111ll11.RowSpan">
            <summary>
            Gets/sets the hatchRow span
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111I1I1">
            <summary>
            Implemented by controls which support row rendering
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111I1I1.UseRowRender">
            <summary>
            Gets/sets whether the row rendering must be used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111I1I1.GetRowRenderColCount">
            <summary>
            Gets the number of cols for row rendering
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111I1I1.SetupRowRender(System.Int32)">
            <summary>
            Setups the rowrendering of an element
            </summary>
            <param name="colCount"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111llIII">
            <summary>
            Stacks its child controls horizontally
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111111l1">
            <summary>
            Stacks its child controls horizontally
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111111l1.Mode">
            <summary>
            Get/sets the mode of Horizontal stacking
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1IlI">
            <summary>
            Represents a layout urlPanel
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.#ctor">
            <summary> 
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.lIIlllllIlI(Nevron.SPVision.Design.l11111Il1I)">
            <summary>
            Starts a new panel
            </summary>
            <param name="sectionType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.lIIlllllIlI(Nevron.SPVision.Design.l11111Il1I,System.String)">
            <summary>
            Starts a new panel
            </summary>
            <param name="sectionType"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1llI">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1llI(System.String)">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1llI(System.String,Nevron.SPVision.Design.StackMode)">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1llI(Nevron.SPVision.Design.StackMode)">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1l1l">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1l1l(System.String)">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1l11">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1l11(Nevron.SPVision.Design.StackMode)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1l11(System.String)">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111II1l11(System.String,Nevron.SPVision.Design.StackMode)">
            <summary>
            
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.l111I1Il1I(Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Adds a node to the current panel
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1IlI.lIIlllllI1l">
            <summary>
            Ends a panel
            </summary>
            <returns>returns the panel that was ended</returns>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111llIIl">
            <summary>
            Represents a panel of a layout urlPanel
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llIIl.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llIIl.CreateElement">
            <summary>
            Creates the HTML element represented by this panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llIIl.l111I1Il1I(Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Pushes a node to the panel
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llIIl.l111I1IlIl(System.Collections.Generic.List{Nevron.SPVision.Design.l1111l1lll})">
            <summary>
            Must override to render the layout element
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111llIIl.Title">
            <summary>
            Gets/sets the title
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111llII1">
            <summary>
            Stacks its child controls vertically
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llII1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llII1.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111llII1.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="title"></param>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111llII1.Mode">
            <summary>
            Get/sets the mode of Vertical stacking
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lII1l">
            <summary>
            Holds constant related to HTML and JQuery
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Nevron.SPVision.Design.l1111lII1l.l1111III11" -->
        <!-- Badly formed XML comment ignored for member "F:Nevron.SPVision.Design.l1111lII1l.l1111IIIll" -->
        <!-- Badly formed XML comment ignored for member "F:Nevron.SPVision.Design.l1111lII1l.CloseTag" -->
        <member name="F:Nevron.SPVision.Design.l1111lII1l.Quote">
            <summary>
            The "'" char (quote)
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.Space">
            <summary>
            The ' ' char (space)
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.Column">
            <summary>
            The ':' char
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111III1I">
            <summary>
            The ';' char
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1lIIIlI111">
            <summary>
            The '=' char
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111IIIIl">
            <summary>
            Non Breakable separator
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.Break">
            <summary>
            Break
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111IIIl1">
            <summary>
            " id='"
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111IIIlI">
            <summary>
            " class='"
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111III1l">
            <summary>
            " style='"
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111IIII1">
            <summary>
            The BODY tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l1111IIIII">
            <summary>
            The script tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Illlll">
            <summary>
            The HEAD tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Illll1">
            <summary>
            The TITLE element
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllllI">
            <summary>
            The DIV tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Illl1l">
            <summary>
            The A tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Illl11">
            <summary>
            The IMG tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Illl1I">
            <summary>
            The INPUT Tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IlllIl">
            <summary>
            The Label Tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IlllI1">
            <summary>
            The SELECT tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IlllII">
            <summary>
            The TEXTAREA Tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill1ll">
            <summary>
            The FORM Tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill1l1">
            <summary>
            The SPAN tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill1lI">
            <summary>
            The P tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill11l">
            <summary>
            The OPTION tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill111">
            <summary>
            The TABLE tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill11I">
            <summary>
            The THEAD tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill1Il">
            <summary>
            The TFOOT tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill1I1">
            <summary>
            The TBODY tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111Ill1II">
            <summary>
            The COLGROUP tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllIll">
            <summary>
            The COL tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllIl1">
            <summary>
            The TR tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllIlI">
            <summary>
            The TD tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllI1l">
            <summary>
            The UL tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllI11">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllI1I">
            <summary>
            The LI tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllIIl">
            <summary>
            The Button tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllII1">
            <summary>
            The FieldSet tag
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lII1l.l111IllIII">
            <summary>
            The Legend tag
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.l111II11I1(System.String)">
            <summary>
            Writes a script block that would execute on the the Document.Ready event
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.l111II11I1(System.String,System.Object[])">
            <summary>
            Writes a script block that would execute on the the Document.Ready event
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.l111II11II(System.Reflection.Assembly,System.Collections.Generic.List{System.String})">
            <summary>
            Writes the specified resource names to the writer
            </summary>
            <param name="assembly"></param>
            <param name="resourceNames"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.l111II1Ill(System.Reflection.Assembly,System.String)">
            <summary>
            Writes the specified resource to the writer
            </summary>
            <param name="assembly"></param>
            <param name="resourcePath"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.Reset">
            <summary>
            Clears the writer
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlII.Flush">
            <summary>
            Flushes the writer to string and resets it
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lIIlI">
            <summary>
            Placeholder for JQuery-UI classes.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111I1I1l">
            <summary>
            .ui-widget: 
            Class to be applied on outer container of all widgets. 
            Applies font family and font size to widget. 
            Also applies same family and 1em font size to child form elements specifically, 
            to combat inheritance issues in Win browsers.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111I1I11">
            <summary>
            .ui-widget-header: 
            Class to be applied to header containers. 
            Applies header container styles to an element and its child text, links, and icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111I1I1I">
            <summary>
            .ui-widget-content: Class to be applied to content containers. 
            Applies content container styles to an element and its child text, links, and icons. 
            (can be applied to parent or sibling of header)
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.StateDefault">
            <summary>
            .ui-state-default:  Class to be applied to clickable button-like elements. 
            Applies "clickable default" container styles to an element and its child text, links, and icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.StateHover">
            <summary>
            .ui-state-hover:  Class to be applied on mouseover to clickable button-like elements. 
            Applies "clickable hover" container styles to an element and its child text, links, and icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111I1IIl">
            <summary>
            .ui-state-active: 
            Class to be applied on mousedown to clickable button-like elements. 
            Applies "clickable active" container styles to an element and its child text, links, and icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIlll">
            <summary>
            .ui-state-highlight: Class to be applied to highlighted or selected elements. 
            Applies "highlight" container styles to an element and its child text, links, and icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIll1">
            <summary>
            .ui-state-error: 
            Class to be applied to error messaging container elements. 
            Applies "error" container styles to an element and its child text, links, and icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIllI">
            <summary>
            .ui-state-error-text: 
            An additional class that applies just the error text color without background. 
            Can be used on form labels for instance. Also applies error icon color to child icons.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.StateDisabled">
            <summary>
            .ui-state-disabled: 
            Applies a dimmed opacity to disabled UI elements. 
            Meant to be added in addition to an already-styled element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIl1l">
            <summary>
            .ui-priority-primary: 
            Class to be applied to a priority-1 button in situations where button hierarchy is needed. 
            Applies bold text.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIl11">
            <summary>
            .ui-priority-secondary: 
            Class to be applied to a priority-2 button in situations where button hierarchy is needed. 
            Applies normal weight text and slight transparency to element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.Icon">
            <summary>
            .ui-icon: Base class to be applied to an icon element. 
            Sets dimensions to 16px square block, hides inner text, 
            sets background itemPreview to "content" state sprite itemPreview. 
            Note: .ui-icon class will be given a different sprite background itemPreview depending on its parent container. 
            For example, a ui-icon element within a ui-state-default container will get colored according to the ui-state-default's icon color.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIl1I">
            <summary>
            Info icon
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIlIl">
            <summary>
            Alert icon
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIlI1">
            <summary>
            .ui-corner-tl: Applies corner-radius to top left corner of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111IIlII">
            <summary>
            .ui-corner-tl: Applies corner-radius to top left corner of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II1ll">
            <summary>
            .ui-corner-bl: Applies corner-radius to bottom left corner of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II1l1">
            <summary>
            .ui-corner-br: Applies corner-radius to bottom right corner of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II1lI">
            <summary>
            .ui-corner-top: Applies corner-radius to both top corners of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II11l">
            <summary>
            .ui-corner-bottom: Applies corner-radius to both bottom corners of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II111">
            <summary>
            .ui-corner-right: Applies corner-radius to both right corners of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II11I">
            <summary>
            .ui-corner-left: Applies corner-radius to both left corners of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II1Il">
            <summary>
            .ui-corner-all: Applies corner-radius to all corners of element.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II1I1">
            <summary>
            .ui-widget-overlay: 
            Applies 100% wxh dimensions to an overlay screen, along with background color/texture, and screen opacity.
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.l1111lIIlI.l1111II1II">
            <summary>
            .ui-widget-shadow: 
            Class to be applied to overlay widget shadow elements. 
            Applies background color/texture, custom corner radius, opacity, top/left offsets and shadow "thickness". 
            Thickness is applied via padding to all sides of a shadow that is set to match the dimensions of the overlay element. 
            Offsets are applied via top and left margins (can be positive or negative).
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Write(System.Char)">
            <summary>
            Writes a character
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Write(System.String)">
            <summary>
            Writes a string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Write(System.Char[])">
            <summary>
            Writes a char array
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Write(System.Char[],System.Int32)">
            <summary>
            Writes a char array
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Write(System.String,System.Object[])">
            <summary>
            Writes a formatted string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Reset">
            <summary>
            Clears the writer
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.Flush">
            <summary>
            Flushes the writer to string and resets it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIlI1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity is large enough
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.NCheckBox">
            <summary>
            A checkbox
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NCheckBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NCheckBox.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <param name="check"></param>
            <param name="onClick"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.NCheckBox.Checked">
            <summary>
            Gets/sets whether the check box is checked
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NCheckBox.l111II1ll1">
            <summary>
            Gets a script, which returns the checked state of the check box on the client side
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l111111lII">
            <summary>
            Represents a widget, which groups several checkboxes in rows and cols 
            and provides a method to get the checked checks collective value 
            as a comma separated string or string with an int mask.
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lII.OnValueChanged">
            <summary>
            Gets/sets the JScript which is executed when the value has changed on the client side
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lII.l111I11I11">
            <summary>
            The value, which is set when none of the checks is checked
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lII.l111I11I1I">
            <summary>
            Gets/sets whether the value on the client side must be constructed as an int mask or not
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.l111IIIll1(System.Collections.Generic.List{Nevron.SPVision.Design.l111111lII.l11llIlI1},System.Int32)">
            <summary>
            Initializes a non reorderable check box group with the specified number of columns
            </summary>
            <param name="checkBoxInfos">info for the check boxes</param>
            <param name="cols">max number of cols</param>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.l111IIIllI(System.Collections.Generic.List{Nevron.SPVision.Design.l111111lII.l11llIlI1})">
            <summary>
            Initializes a reorderable check box group.
            </summary>
            <param name="checkBoxInfos"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.l111II1ll1">
            <summary>
            Gets a JScript which returns a comma separated string of the checked check boxes values
            </summary>
            <param name="checkBoxInfos"></param>
            <param name="cols"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an InitColorPicker script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.l111IIIl1l(System.Int32)">
            <summary>
            Creates the HTML node that represents the group box when it is not reorderable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lII.l111IIIl11">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.SPVision.Design.NColorPicker">
            <summary>
            Represents a color picker
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NColorPicker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NColorPicker.Color">
            <summary>
            Gets/sets the color picker button color
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NColorPicker.OnColorChanged">
            <summary>
            Gets/sets the JScript, which is executed when the color has changed on the client side
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NColorPicker.l111II1ll1">
            <summary>
            Gets the JScript that gets the client side ARGB color value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NColorPicker.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an InitColorPicker script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l1Ill">
            <summary>
            Represents a color picker button
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1Ill.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1Ill.Color">
            <summary>
            Gets/sets the color picker button color
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111l1Ill.OnColorChanged">
            <summary>
            Gets/sets the JScript, which is executed when the color has changed on the client side
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111l1Ill.l111II1ll1">
            <summary>
            Gets the JScript that gets the client side ARGB color value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.SPVision.Design.NComboBox">
            <summary>
            Represents a list box widget. 
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NComboBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NComboBox.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an NInitListBox script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.NComboBox.l111I11IlI">
            <summary>
            Gets a script which returns the selected index of the list box on the client side
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NComboBox.SelectedIndex">
            <summary>
            Gets/sets the selected index
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NComboBox.AddItem(Nevron.SPVision.Design.l11111lI1l)">
            <summary>
            Adds an item to the list box
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NComboBox.l11llIlIll">
            <summary>
            Initializes the list box
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111lI1l">
            <summary>
            Represents a combo box item
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lI1l.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="onSelectedJS"></param>
            <param name="text"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l111111lI1">
            <summary>
            Represents a hatch style picker
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lI1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lI1.GradientStyle">
            <summary>
            Gets/sets the gradient style
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lI1.GradientVariant">
            <summary>
            Gets/sets the selected hatch style
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lI1.StartColor">
            <summary>
            Gets/sets the fore color
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l111111lI1.EndColor">
            <summary>
            Gets/sets the end color
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lI1.l111II1ll1">
            <summary>
            Gets the JScript that gets the client side hatch style value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l111111lI1.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an NInitGradientVariantPicker script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111llll">
            <summary>
            Represents a hatch style picker
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111llll.HatchStyle">
            <summary>
            Gets/sets the selected hatch style
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111llll.ForeColor">
            <summary>
            Gets/sets the fore color
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111llll.BackColor">
            <summary>
            Gets/sets the back color
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111llll.l111II1ll1">
            <summary>
            Gets the JScript that gets the client side hatch style value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111llll.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an NInitHatchStylePicker script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.NListBox">
            <summary>
            Represents a list box widget. 
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBox.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an NInitListBox script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.NListBox.l111I11IlI">
            <summary>
            Gets a script which returns the selected index of the list box on the client side
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NListBox.SelectedIndex">
            <summary>
            Gets/sets the selected index
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBox.AddItem(Nevron.SPVision.Design.NListBoxItem)">
            <summary>
            Adds an item to the list box
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBox.l11llIlIll">
            <summary>
            Initializes the list box
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.NListBoxItem">
            <summary>
            Represents a list box item
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBoxItem.#ctor">
            <summary>
            
            </summary>
            <param name="onSelectedJS"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBoxItem.#ctor(System.String,Nevron.SPVision.Design.l1111l1lll[])">
            <summary>
            Initialzier constructor
            </summary>
            <param name="onSelectedJS"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBoxItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialzier constructor
            </summary>
            <param name="onSelectedJS"></param>
            <param name="itemPreview"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBoxItem.#ctor(System.String,System.String)">
            <summary>
            Initialzier constructor
            </summary>
            <param name="onSelectedJS"></param>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.NListBoxItem.OnSelected">
            <summary>
            Gets/sets the on selected JS
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBoxItem.Render(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to update the index prior to rendering
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NListBoxItem.l111II1IlI">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.NButton">
            <summary>
            A button widget
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NButton.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="onclick"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.NButton.OnButtonClick">
            <summary>
            Gets/sets the onbuttonclick attribute
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NButton.SetText(System.String)">
            <summary>
            Sets the button text
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NButton.l111IIlII1(System.String,System.String)">
            <summary>
            Initializes the content of the button to be an icon and text
            </summary>
            <param name="iconClass"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NButton.l111IIlIII(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes the content of the button to be a image and text
            </summary>
            <param name="imageURL"></param>
            <param name="imageWidth"></param>
            <param name="imageHeight"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NButton.l111II1lll">
            <summary>
            Initializes the button
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111lI1Il">
            <summary>
            Serves as base class for draggable divs
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI1Il.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lI1Il.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to render the InitDraggable script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Nevron.SPVision.Design.l11111lII1">
            <summary>
            Serves as base class for draggable divs
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lII1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111lII1.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to render an InitDroppable script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l11111lII1.Action">
            <summary>
            Gets/sets the drop action script
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111111I1">
            <summary>
            A button widget
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111111I1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111111I1.RenderContents(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to render the embedded elements of the spinner
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111I1.Integer">
            <summary>
            Gets/sets whether the spinner displays integer or floating point values
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111I1.OnValueChanged">
            <summary>
            Gets/sets the JScript, which is executed when the value has changed on the client side
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111I1.l111I11III">
            <summary>
            Gets/sets the spinner value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111I1.Min">
            <summary>
            Gets/sets the Min
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111I1.Max">
            <summary>
            Gets/sets Max
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.l1111111I1.Step">
            <summary>
            Gets/sets Step
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111111I1.l111II1ll1">
            <summary>
            Returns the JScript that gets the spinner value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111111I1.l111IIIlII">
            <summary>
            Initializes the spinner
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.NTextBox">
            <summary>
            Represents a text box, which renders as an input or text area
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.SPVision.Design.NTextBox.CreateExtraButtonDelegate">
            <summary>
            When provided the text box will render an extra element behind the Apply button
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l111II1ll1">
            <summary>
            Returns the JScript that gets the text box text value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.SPVision.Design.NTextBox.Action">
            <summary>
            Gets/sets the element action which is executed when the value has changed on the client side
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NTextBox.Mode">
            <summary>
            Gets/sets the text box value
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NTextBox.Text">
            <summary>
            Gets/sets the text displayed by the text box
            </summary>
        </member>
        <member name="P:Nevron.SPVision.Design.NTextBox.ShowApplyButton">
            <summary>
            Gets/sets whether the Apply button needs to be displayed
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.RenderContents(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to render a HStack which contains a textarea/input and optional apply and extra button
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11Illllll">
            <summary>
            Creates a password input element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11Illlll1">
            <summary>
            Creates a normal text area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11IlllllI">
            <summary>
            Creates a multipline text area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11Illll1l">
            <summary>
            Creates a source code text area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11Illll11">
            <summary>
            Creates the apply button
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11Illll1I">
            <summary>
            Gets the Id of the input/textarea element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11IllllIl">
            <summary>
            Gets the Id of the hidden text area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.NTextBox.l11IllllI1">
            <summary>
            Gets the action which must be executed to commit the input value to the server
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.SPVision.Design.l1111l11II">
            <summary>
            Represents a base class for JQuery widgets
            </summary>
        </member>
        <member name="T:Nevron.SPVision.Design.NTab">
            <summary>
            Represents a tab widget
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTab.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTab.lIIlllllIIl(Nevron.SPVision.Design.NTabPage)">
            <summary>
            
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NTab.RenderContents(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NTab.RenderEndTag(Nevron.SPVision.Design.l1111lIlII)">
            <summary>
            Overriden to append an NInitTab script
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NTab.l111II1lI1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTab.l111II1lII(Nevron.SPVision.Design.NTabPage,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="index"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.SPVision.Design.NTabPage">
            <summary>
            Represents a page from a tab control
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.NTabPage.#ctor(System.String,Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.NTabPage.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="href"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111Illl.lIIlllllIlI(Nevron.SPVision.Design.l11111Il1I)">
            <summary>
            Starts a new panel
            </summary>
            <param name="sectionType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111Illl.lIIlllllIlI(Nevron.SPVision.Design.l11111Il1I,System.String)">
            <summary>
            Starts a new panel
            </summary>
            <param name="sectionType"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111Illl.l111I1Il1I(Nevron.SPVision.Design.l1111l1lll)">
            <summary>
            Adds a node to the current panel
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l11111Illl.lIIlllllI1l">
            <summary>
            Ends a panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.BeginInit">
            <summary>
            Starts a toolbar group
            </summary>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.AddButton(System.String,System.String,Nevron.SPVision.Design.l11111I111)">
            <summary>
            Adds a button with an icon to the toolbar
            </summary>
            <param name="title"></param>
            <param name="actionJS"></param>
            <param name="imageSrc"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.AddButton(System.String,System.String)">
            <summary>
            Adds a text content button
            </summary>
            <param name="text"></param>
            <param name="actionJS"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.AddButton(Nevron.SPVision.Design.l1111l1ll1,System.String)">
            <summary>
            Adds a custom content button
            </summary>
            <param name="content"></param>
            <param name="actionJS"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.AddButton(Nevron.SPVision.Design.l1111l1ll1,System.String,System.Boolean)">
            <summary>
            Add disabled button
            </summary>
            <param name="title"></param>
            <param name="actionJS"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.l111II111l(Nevron.SPVision.Design.l1111l11II)">
            <summary>
            Adds a seperator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.lIIlllllI1I">
            <summary>
            Adds a seperator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.SPVision.Design.l1111lIl1l.EndInit">
            <summary>
            Ends a toolbar group
            </summary>
        </member>
    </members>
</doc>
